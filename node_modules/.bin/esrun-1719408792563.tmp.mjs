process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719408792563.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// main.ts
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
var line = [];
async function scrapeHrefAttributesFromWebsite(url) {
  try {
    const response = await axios.get(url);
    const $ = cheerio.load(response.data);
    const links = $("a");
    const hrefs = [];
    links.each((_, link) => {
      const href = $(link).attr("href");
      if (href) {
        if (href.includes("https://")) {
          hrefs.push(href);
        } else {
          hrefs.push(url + href);
        }
      }
    });
    return hrefs;
  } catch (error) {
    console.error(`Error fetching or processing ${url}: `, error);
    return [];
  }
}
(async () => {
  const url = "https://youtube.com";
  const hrefs = await scrapeHrefAttributesFromWebsite(url);
  hrefs.forEach((element) => {
    if (url != element) {
      line.push(element);
    }
  });
  console.log(`${line.length}`);
  while (true) {
    (async () => {
      let hrefs2 = await scrapeHrefAttributesFromWebsite(line[0]);
      hrefs2.forEach((element) => {
        if (url != element) {
          line.push(element);
        }
      });
      line.pop[0];
      console.log(`Got: ${line[0]}: ${hrefs2.length} left`);
    })();
  }
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VSb290IjogIkM6XFxVc2Vyc1xccDAxXFxHSVRIVUJcXFR5cGVTY3JpcHQyIiwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0ICogYXMgY2hlZXJpbyBmcm9tIFwiY2hlZXJpb1wiO1xyXG5cclxubGV0IGxpbmU6IHN0cmluZ1tdID0gW11cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHNjcmFwZUhyZWZBdHRyaWJ1dGVzRnJvbVdlYnNpdGUodXJsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIEZldGNoIHRoZSB3ZWJwYWdlIGNvbnRlbnRcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIExvYWQgdGhlIGZldGNoZWQgSFRNTCBjb250ZW50IGludG8gQ2hlZXJpb1xyXG4gICAgICAgIGNvbnN0ICQgPSBjaGVlcmlvLmxvYWQocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gU2VsZWN0IGFsbCA8YT4gdGFncyBhbmQgZXh0cmFjdCBocmVmIGF0dHJpYnV0ZXNcclxuICAgICAgICBjb25zdCBsaW5rcyA9ICQoJ2EnKTsgLy8gQWRqdXN0IHRoZSBzZWxlY3RvciBhcyBuZWVkZWRcclxuICAgICAgICBjb25zdCBocmVmczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAgICAgbGlua3MuZWFjaCgoXywgbGluaykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBocmVmID0gJChsaW5rKS5hdHRyKCdocmVmJyk7XHJcbiAgICAgICAgICAgIGlmIChocmVmKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaHJlZi5pbmNsdWRlcyhcImh0dHBzOi8vXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZnMucHVzaChocmVmKTtcclxuICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBocmVmcy5wdXNoKHVybCtocmVmKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBocmVmcztcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmV0Y2hpbmcgb3IgcHJvY2Vzc2luZyAke3VybH06IGAsIGVycm9yKTtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEV4YW1wbGUgdXNhZ2VcclxuKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHVybCA9ICdodHRwczovL3lvdXR1YmUuY29tJztcclxuICAgIGNvbnN0IGhyZWZzID0gYXdhaXQgc2NyYXBlSHJlZkF0dHJpYnV0ZXNGcm9tV2Vic2l0ZSh1cmwpO1xyXG5cclxuICAgIGhyZWZzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgaWYgKHVybCAhPSBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGxpbmUucHVzaChlbGVtZW50KVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGAke2xpbmUubGVuZ3RofWApXHJcblxyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgaHJlZnMgPSBhd2FpdCBzY3JhcGVIcmVmQXR0cmlidXRlc0Zyb21XZWJzaXRlKGxpbmVbMF0pO1xyXG4gICAgICAgICAgICBocmVmcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHVybCAhPSBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZS5wdXNoKGVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsaW5lLnBvcFswXVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgR290OiAke2xpbmVbMF19OiAke2hyZWZzLmxlbmd0aH0gbGVmdGApXHJcbiAgICAgICAgfSkoKTsgXHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsT0FBTyxXQUFXO0FBQ2xCLFlBQVksYUFBYTtBQUV6QixJQUFJLE9BQWlCLENBQUM7QUFFdEIsZUFBZSxnQ0FBZ0MsS0FBZ0M7QUFDM0UsTUFBSTtBQUVBLFVBQU0sV0FBVyxNQUFNLE1BQU0sSUFBSSxHQUFHO0FBR3BDLFVBQU0sSUFBWSxhQUFLLFNBQVMsSUFBSTtBQUdwQyxVQUFNLFFBQVEsRUFBRSxHQUFHO0FBQ25CLFVBQU0sUUFBa0IsQ0FBQztBQUV6QixVQUFNLEtBQUssQ0FBQyxHQUFHLFNBQVM7QUFDcEIsWUFBTSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssTUFBTTtBQUNoQyxVQUFJLE1BQU07QUFDTixZQUFJLEtBQUssU0FBUyxVQUFVLEdBQUc7QUFDM0IsZ0JBQU0sS0FBSyxJQUFJO0FBQUEsUUFDbkIsT0FBTTtBQUNGLGdCQUFNLEtBQUssTUFBSSxJQUFJO0FBQUEsUUFDdkI7QUFBQSxNQUNKO0FBQUEsSUFDSixDQUFDO0FBRUQsV0FBTztBQUFBLEVBQ1gsU0FBUyxPQUFQO0FBQ0UsWUFBUSxNQUFNLGdDQUFnQyxTQUFTLEtBQUs7QUFDNUQsV0FBTyxDQUFDO0FBQUEsRUFDWjtBQUNKO0FBQUEsQ0FHQyxZQUFZO0FBQ1QsUUFBTSxNQUFNO0FBQ1osUUFBTSxRQUFRLE1BQU0sZ0NBQWdDLEdBQUc7QUFFdkQsUUFBTSxRQUFRLGFBQVc7QUFDckIsUUFBSSxPQUFPLFNBQVM7QUFDaEIsV0FBSyxLQUFLLE9BQU87QUFBQSxJQUNyQjtBQUFBLEVBQ0osQ0FBQztBQUVELFVBQVEsSUFBSSxHQUFHLEtBQUssUUFBUTtBQUU1QixTQUFPLE1BQU07QUFDVCxLQUFDLFlBQVk7QUFDVCxVQUFJQSxTQUFRLE1BQU0sZ0NBQWdDLEtBQUssQ0FBQyxDQUFDO0FBQ3pELE1BQUFBLE9BQU0sUUFBUSxhQUFXO0FBQ3JCLFlBQUksT0FBTyxTQUFTO0FBQ2hCLGVBQUssS0FBSyxPQUFPO0FBQUEsUUFDckI7QUFBQSxNQUNKLENBQUM7QUFDRCxXQUFLLElBQUksQ0FBQztBQUNWLGNBQVEsSUFBSSxRQUFRLEtBQUssQ0FBQyxNQUFNQSxPQUFNLGFBQWE7QUFBQSxJQUN2RCxHQUFHO0FBQUEsRUFDUDtBQUVKLEdBQUc7IiwKICAibmFtZXMiOiBbImhyZWZzIl0KfQo=

	