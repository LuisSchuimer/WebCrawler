process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719410262655.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// main.ts
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
var line = [];
var watched = [];
async function scrapeHrefAttributesFromWebsite(url) {
  try {
    const response = await axios.get(url);
    const $ = cheerio.load(response.data);
    const links = $("a");
    const hrefs = [];
    links.each((_, link) => {
      const href = $(link).attr("href");
      if (href) {
        if (href.includes("https://")) {
          hrefs.push(href);
        } else {
          hrefs.push(url + href);
        }
      }
    });
    return hrefs;
  } catch (error) {
    console.log(`Error fetching or processing ${url}: `);
    return [];
  }
}
(async () => {
  const url = "https://www.w3schools.com";
  const hrefs = await scrapeHrefAttributesFromWebsite(url);
  hrefs.forEach((element) => {
    if (url !== element) {
      line.push(element);
    }
  });
  console.log(`${line.length}`);
  while (line.length !== 0) {
    const currentUrl = line.shift();
    if (!currentUrl)
      continue;
    try {
      if (!watched.includes(currentUrl)) {
        const hrefs2 = await scrapeHrefAttributesFromWebsite(currentUrl);
        hrefs2.forEach((element) => {
          if (url !== element) {
            line.push(element);
          }
        });
        line.forEach((element) => {
          if (watched.includes(element)) {
            line.pop[line.indexOf(element)];
          }
        });
        console.log(`Got: ${currentUrl}: ${line.length} left; ${watched.length} watched`);
        watched.push(currentUrl);
      }
    } catch (error) {
      console.log(`Error processing ${currentUrl}`);
    }
  }
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VSb290IjogIkM6XFxVc2Vyc1xccDAxXFxHSVRIVUJcXFR5cGVTY3JpcHQyIiwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0ICogYXMgY2hlZXJpbyBmcm9tIFwiY2hlZXJpb1wiO1xyXG5cclxubGV0IGxpbmU6IHN0cmluZ1tdID0gW107XHJcbmxldCB3YXRjaGVkOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gc2NyYXBlSHJlZkF0dHJpYnV0ZXNGcm9tV2Vic2l0ZSh1cmw6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy8gRmV0Y2ggdGhlIHdlYnBhZ2UgY29udGVudFxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gTG9hZCB0aGUgZmV0Y2hlZCBIVE1MIGNvbnRlbnQgaW50byBDaGVlcmlvXHJcbiAgICAgICAgY29uc3QgJCA9IGNoZWVyaW8ubG9hZChyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBTZWxlY3QgYWxsIDxhPiB0YWdzIGFuZCBleHRyYWN0IGhyZWYgYXR0cmlidXRlc1xyXG4gICAgICAgIGNvbnN0IGxpbmtzID0gJCgnYScpOyAvLyBBZGp1c3QgdGhlIHNlbGVjdG9yIGFzIG5lZWRlZFxyXG4gICAgICAgIGNvbnN0IGhyZWZzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICBsaW5rcy5lYWNoKChfLCBsaW5rKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhyZWYgPSAkKGxpbmspLmF0dHIoJ2hyZWYnKTtcclxuICAgICAgICAgICAgaWYgKGhyZWYpIHtcclxuICAgICAgICAgICAgICAgIGlmIChocmVmLmluY2x1ZGVzKFwiaHR0cHM6Ly9cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBocmVmcy5wdXNoKGhyZWYpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBocmVmcy5wdXNoKHVybCArIGhyZWYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBocmVmcztcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGZldGNoaW5nIG9yIHByb2Nlc3NpbmcgJHt1cmx9OiBgKTtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEV4YW1wbGUgdXNhZ2VcclxuKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHVybCA9ICdodHRwczovL3d3dy53M3NjaG9vbHMuY29tJztcclxuICAgIGNvbnN0IGhyZWZzID0gYXdhaXQgc2NyYXBlSHJlZkF0dHJpYnV0ZXNGcm9tV2Vic2l0ZSh1cmwpO1xyXG5cclxuICAgIGhyZWZzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgaWYgKHVybCAhPT0gZWxlbWVudCkge1xyXG4gICAgICAgICAgICBsaW5lLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc29sZS5sb2coYCR7bGluZS5sZW5ndGh9YCk7XHJcblxyXG4gICAgd2hpbGUgKGxpbmUubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGFzeW5jIGZ1bmN0aW9uIHRvIGNvbXBsZXRlXHJcbiAgICAgICAgY29uc3QgY3VycmVudFVybCA9IGxpbmUuc2hpZnQoKTsgLy8gR2V0IGFuZCByZW1vdmUgdGhlIGZpcnN0IGVsZW1lbnQgZnJvbSB0aGUgbGluZSBhcnJheVxyXG4gICAgICAgIGlmICghY3VycmVudFVybCkgY29udGludWU7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghd2F0Y2hlZC5pbmNsdWRlcyhjdXJyZW50VXJsKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaHJlZnMgPSBhd2FpdCBzY3JhcGVIcmVmQXR0cmlidXRlc0Zyb21XZWJzaXRlKGN1cnJlbnRVcmwpO1xyXG4gICAgICAgICAgICAgICAgaHJlZnMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXJsICE9PSBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBsaW5lLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAod2F0Y2hlZC5pbmNsdWRlcyhlbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLnBvcFtsaW5lLmluZGV4T2YoZWxlbWVudCldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgR290OiAke2N1cnJlbnRVcmx9OiAke2xpbmUubGVuZ3RofSBsZWZ0OyAke3dhdGNoZWQubGVuZ3RofSB3YXRjaGVkYCk7XHJcbiAgICAgICAgICAgICAgICB3YXRjaGVkLnB1c2goY3VycmVudFVybCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgcHJvY2Vzc2luZyAke2N1cnJlbnRVcmx9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpO1xyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsT0FBTyxXQUFXO0FBQ2xCLFlBQVksYUFBYTtBQUV6QixJQUFJLE9BQWlCLENBQUM7QUFDdEIsSUFBSSxVQUFvQixDQUFDO0FBRXpCLGVBQWUsZ0NBQWdDLEtBQWdDO0FBQzNFLE1BQUk7QUFFQSxVQUFNLFdBQVcsTUFBTSxNQUFNLElBQUksR0FBRztBQUdwQyxVQUFNLElBQVksYUFBSyxTQUFTLElBQUk7QUFHcEMsVUFBTSxRQUFRLEVBQUUsR0FBRztBQUNuQixVQUFNLFFBQWtCLENBQUM7QUFFekIsVUFBTSxLQUFLLENBQUMsR0FBRyxTQUFTO0FBQ3BCLFlBQU0sT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLE1BQU07QUFDaEMsVUFBSSxNQUFNO0FBQ04sWUFBSSxLQUFLLFNBQVMsVUFBVSxHQUFHO0FBQzNCLGdCQUFNLEtBQUssSUFBSTtBQUFBLFFBQ25CLE9BQU87QUFDSCxnQkFBTSxLQUFLLE1BQU0sSUFBSTtBQUFBLFFBQ3pCO0FBQUEsTUFDSjtBQUFBLElBQ0osQ0FBQztBQUVELFdBQU87QUFBQSxFQUNYLFNBQVMsT0FBUDtBQUNFLFlBQVEsSUFBSSxnQ0FBZ0MsT0FBTztBQUNuRCxXQUFPLENBQUM7QUFBQSxFQUNaO0FBQ0o7QUFBQSxDQUdDLFlBQVk7QUFDVCxRQUFNLE1BQU07QUFDWixRQUFNLFFBQVEsTUFBTSxnQ0FBZ0MsR0FBRztBQUV2RCxRQUFNLFFBQVEsYUFBVztBQUNyQixRQUFJLFFBQVEsU0FBUztBQUNqQixXQUFLLEtBQUssT0FBTztBQUFBLElBQ3JCO0FBQUEsRUFDSixDQUFDO0FBRUQsVUFBUSxJQUFJLEdBQUcsS0FBSyxRQUFRO0FBRTVCLFNBQU8sS0FBSyxXQUFXLEdBQUc7QUFFdEIsVUFBTSxhQUFhLEtBQUssTUFBTTtBQUM5QixRQUFJLENBQUM7QUFBWTtBQUVqQixRQUFJO0FBQ0EsVUFBSSxDQUFDLFFBQVEsU0FBUyxVQUFVLEdBQUc7QUFDL0IsY0FBTUEsU0FBUSxNQUFNLGdDQUFnQyxVQUFVO0FBQzlELFFBQUFBLE9BQU0sUUFBUSxhQUFXO0FBQ3JCLGNBQUksUUFBUSxTQUFTO0FBQ2pCLGlCQUFLLEtBQUssT0FBTztBQUFBLFVBQ3JCO0FBQUEsUUFDSixDQUFDO0FBRUQsYUFBSyxRQUFRLENBQUMsWUFBWTtBQUN0QixjQUFJLFFBQVEsU0FBUyxPQUFPLEdBQUc7QUFDM0IsaUJBQUssSUFBSSxLQUFLLFFBQVEsT0FBTyxDQUFDO0FBQUEsVUFDbEM7QUFBQSxRQUNKLENBQUM7QUFFRCxnQkFBUSxJQUFJLFFBQVEsZUFBZSxLQUFLLGdCQUFnQixRQUFRLGdCQUFnQjtBQUNoRixnQkFBUSxLQUFLLFVBQVU7QUFBQSxNQUMzQjtBQUFBLElBQ0osU0FBUyxPQUFQO0FBQ0UsY0FBUSxJQUFJLG9CQUFvQixZQUFZO0FBQUEsSUFDaEQ7QUFBQSxFQUNKO0FBQ0osR0FBRzsiLAogICJuYW1lcyI6IFsiaHJlZnMiXQp9Cg==

	