process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719556622718.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// main.ts
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
import { appendFile } from "fs";
var line = [];
var watched = [];
var buffer = [];
var removed = [];
var error = [];
function timeoutPromise(promise, ms) {
  const timeout = new Promise((_, reject) => {
    const id = setTimeout(() => {
      clearTimeout(id);
      reject(new Error(`Timeout after ${ms}ms`));
    }, ms);
  });
  return Promise.race([promise, timeout]);
}
async function scrapeHrefAttributesFromWebsite(url) {
  try {
    const response = await timeoutPromise(axios.get(url), 1e3);
    const $ = cheerio.load(response.data);
    const links = $("a");
    const hrefs = [];
    links.each((_, link) => {
      const href = $(link).attr("href");
      if (href) {
        if (href.includes("https://")) {
          hrefs.push(href);
        } else {
          hrefs.push(getBaseUrl(url) + href);
        }
      }
    });
    return hrefs;
  } catch (err) {
    error.push(url);
    return [];
  }
}
function getBaseUrl(url) {
  try {
    const parsedUrl = new URL(url);
    return `${parsedUrl.protocol}//${parsedUrl.hostname}`;
  } catch (error2) {
    return "";
  }
}
try {
  (async () => {
    const url = "https://de.wikipedia.org/wiki/TypeScript";
    const hrefs = await scrapeHrefAttributesFromWebsite(url);
    hrefs.forEach((element) => {
      if (url !== element) {
        line.push(element);
      }
    });
    console.log(`${line.length}`);
    while (line.length !== 0 || buffer.length !== 0) {
      const currentUrl = line.shift();
      if (!currentUrl)
        continue;
      try {
        if (!watched.includes(currentUrl)) {
          const hrefs2 = await scrapeHrefAttributesFromWebsite(currentUrl);
          hrefs2.forEach((element) => {
            if (url != element) {
              if (!watched.includes(element)) {
                line.push(element);
              } else {
                removed.push(element);
              }
            }
          });
          line.forEach((element) => {
            if (watched.includes(element)) {
              line.splice(line.indexOf(element), 1);
              removed.push(element);
            }
          });
          if (line.length >= 1e4) {
            line.forEach((element) => {
              buffer.push(element);
            });
            line = [];
            while (line.length <= 1e3) {
              const buffer_url = buffer.shift();
              line.push(buffer_url);
            }
          } else if (line.length == 0) {
            while (line.length <= 1e3) {
              const buffer_url = buffer.shift();
              line.push(buffer_url);
            }
          }
          watched.push(currentUrl);
          appendFile("log.txt", `${line.length} in active queue; ${buffer.length} in buffer; ${watched.length} watched; ${removed.length} removed; ${removed.length + watched.length} processed; ${error.length} with errors; Base: ${getBaseUrl(currentUrl)}: Got: ${currentUrl} 
`, function(err) {
            if (err) {
            } else {
              console.log(`${line.length} in active queue; ${buffer.length} in buffer; ${watched.length} watched; ${removed.length} removed; ${removed.length + watched.length} processed; ${error.length} with errors; Base: ${getBaseUrl(currentUrl)}`);
            }
          });
        } else {
          removed.push(currentUrl);
        }
      } catch (err) {
        error.push(currentUrl);
        continue;
      }
    }
  })();
} catch (err) {
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VSb290IjogIkM6XFxVc2Vyc1xccDAxXFxHSVRIVUJcXFR5cGVTY3JpcHQyIiwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0ICogYXMgY2hlZXJpbyBmcm9tIFwiY2hlZXJpb1wiO1xyXG5pbXBvcnQgeyBhcHBlbmRGaWxlIH0gZnJvbSBcImZzXCI7XHJcblxyXG5cclxubGV0IGxpbmU6IHN0cmluZ1tdID0gW107XHJcbmxldCB3YXRjaGVkOiBzdHJpbmdbXSA9IFtdO1xyXG5sZXQgYnVmZmVyOiBzdHJpbmdbXSA9IFtdXHJcbmxldCByZW1vdmVkOiBzdHJpbmdbXSA9IFtdO1xyXG5sZXQgZXJyb3I6IHN0cmluZ1tdID0gW107XHJcblxyXG5mdW5jdGlvbiB0aW1lb3V0UHJvbWlzZTxUPihwcm9taXNlOiBQcm9taXNlPFQ+LCBtczogbnVtYmVyKTogUHJvbWlzZTxUPiB7XHJcbiAgICAvLyBFcnN0ZWxsZW4gZWluZXIgbmV1ZW4gUHJvbWlzZSwgZGllIG5hY2ggbXMgTWlsbGlzZWt1bmRlbiBhYmdlbGVobnQgd2lyZFxyXG4gICAgY29uc3QgdGltZW91dCA9IG5ldyBQcm9taXNlPG5ldmVyPigoXywgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgaWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcclxuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgVGltZW91dCBhZnRlciAke21zfW1zYCkpO1xyXG4gICAgICAgIH0sIG1zKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFJhY2UgZGllIFx1MDBGQ2JlcmdlYmVuZSBQcm9taXNlIGdlZ2VuIGRpZSBUaW1lb3V0LVByb21pc2VcclxuICAgIHJldHVybiBQcm9taXNlLnJhY2UoW3Byb21pc2UsIHRpbWVvdXRdKTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gc2NyYXBlSHJlZkF0dHJpYnV0ZXNGcm9tV2Vic2l0ZSh1cmw6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gRmV0Y2ggdGhlIHdlYnBhZ2UgY29udGVudFxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGltZW91dFByb21pc2UoYXhpb3MuZ2V0KHVybCksIDEwMDApO1xyXG4gICAgICAgIC8vIExvYWQgdGhlIGZldGNoZWQgSFRNTCBjb250ZW50IGludG8gQ2hlZXJpb1xyXG4gICAgICAgIGNvbnN0ICQgPSBjaGVlcmlvLmxvYWQocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gU2VsZWN0IGFsbCA8YT4gdGFncyBhbmQgZXh0cmFjdCBocmVmIGF0dHJpYnV0ZXNcclxuICAgICAgICBjb25zdCBsaW5rcyA9ICQoJ2EnKTsgLy8gQWRqdXN0IHRoZSBzZWxlY3RvciBhcyBuZWVkZWRcclxuICAgICAgICBjb25zdCBocmVmczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAgICAgbGlua3MuZWFjaCgoXywgbGluaykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBocmVmID0gJChsaW5rKS5hdHRyKCdocmVmJyk7XHJcbiAgICAgICAgICAgIGlmIChocmVmKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaHJlZi5pbmNsdWRlcyhcImh0dHBzOi8vXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZnMucHVzaChocmVmKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZnMucHVzaChnZXRCYXNlVXJsKHVybCkgKyBocmVmKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gaHJlZnM7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBlcnJvci5wdXNoKHVybCk7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0QmFzZVVybCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlZFVybCA9IG5ldyBVUkwodXJsKTtcclxuICAgICAgICByZXR1cm4gYCR7cGFyc2VkVXJsLnByb3RvY29sfS8vJHtwYXJzZWRVcmwuaG9zdG5hbWV9YDtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxudHJ5IHtcclxuLy8gRXhhbXBsZSB1c2FnZVxyXG4gICAgKGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSAnaHR0cHM6Ly9kZS53aWtpcGVkaWEub3JnL3dpa2kvVHlwZVNjcmlwdCc7XHJcbiAgICAgICAgY29uc3QgaHJlZnMgPSBhd2FpdCBzY3JhcGVIcmVmQXR0cmlidXRlc0Zyb21XZWJzaXRlKHVybCk7XHJcblxyXG4gICAgICAgIGhyZWZzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgIGlmICh1cmwgIT09IGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGxpbmUucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhgJHtsaW5lLmxlbmd0aH1gKTtcclxuXHJcbiAgICAgICAgd2hpbGUgKGxpbmUubGVuZ3RoICE9PSAwIHx8IGJ1ZmZlci5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGFzeW5jIGZ1bmN0aW9uIHRvIGNvbXBsZXRlXHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRVcmwgPSBsaW5lLnNoaWZ0KCk7IC8vIEdldCBhbmQgcmVtb3ZlIHRoZSBmaXJzdCBlbGVtZW50IGZyb20gdGhlIGxpbmUgYXJyYXlcclxuICAgICAgICAgICAgaWYgKCFjdXJyZW50VXJsKSBjb250aW51ZTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmICghd2F0Y2hlZC5pbmNsdWRlcyhjdXJyZW50VXJsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhyZWZzID0gYXdhaXQgc2NyYXBlSHJlZkF0dHJpYnV0ZXNGcm9tV2Vic2l0ZShjdXJyZW50VXJsKVxyXG4gICAgICAgICAgICAgICAgICAgIGhyZWZzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1cmwgIT0gZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3YXRjaGVkLmluY2x1ZGVzKGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsaW5lLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdhdGNoZWQuaW5jbHVkZXMoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUuc3BsaWNlKGxpbmUuaW5kZXhPZihlbGVtZW50KSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmUubGVuZ3RoID49IDEwMDAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnB1c2goZWxlbWVudClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChsaW5lLmxlbmd0aCA8PSAxMDAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBidWZmZXJfdXJsOiBzdHJpbmcgPSBidWZmZXIuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUucHVzaChidWZmZXJfdXJsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGluZS5sZW5ndGggPT0gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGxpbmUubGVuZ3RoIDw9IDEwMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlcl91cmw6IHN0cmluZyA9IGJ1ZmZlci5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5wdXNoKGJ1ZmZlcl91cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHdhdGNoZWQucHVzaChjdXJyZW50VXJsKTtcclxuICAgICAgICAgICAgICAgICAgICBhcHBlbmRGaWxlKFwibG9nLnR4dFwiLCBgJHtsaW5lLmxlbmd0aH0gaW4gYWN0aXZlIHF1ZXVlOyAke2J1ZmZlci5sZW5ndGh9IGluIGJ1ZmZlcjsgJHt3YXRjaGVkLmxlbmd0aH0gd2F0Y2hlZDsgJHtyZW1vdmVkLmxlbmd0aH0gcmVtb3ZlZDsgJHtyZW1vdmVkLmxlbmd0aCArIHdhdGNoZWQubGVuZ3RofSBwcm9jZXNzZWQ7ICR7ZXJyb3IubGVuZ3RofSB3aXRoIGVycm9yczsgQmFzZTogJHtnZXRCYXNlVXJsKGN1cnJlbnRVcmwpfTogR290OiAke2N1cnJlbnRVcmx9IFxcbmAsIGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhcHBlbmQgZmFpbGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkb25lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtsaW5lLmxlbmd0aH0gaW4gYWN0aXZlIHF1ZXVlOyAke2J1ZmZlci5sZW5ndGh9IGluIGJ1ZmZlcjsgJHt3YXRjaGVkLmxlbmd0aH0gd2F0Y2hlZDsgJHtyZW1vdmVkLmxlbmd0aH0gcmVtb3ZlZDsgJHtyZW1vdmVkLmxlbmd0aCArIHdhdGNoZWQubGVuZ3RofSBwcm9jZXNzZWQ7ICR7ZXJyb3IubGVuZ3RofSB3aXRoIGVycm9yczsgQmFzZTogJHtnZXRCYXNlVXJsKGN1cnJlbnRVcmwpfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVkLnB1c2goY3VycmVudFVybCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgZXJyb3IucHVzaChjdXJyZW50VXJsKVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KSgpO1xyXG5cclxufWNhdGNoIChlcnIpIHtcclxuICAgIC8vIGVycm9yXHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLE9BQU8sV0FBVztBQUNsQixZQUFZLGFBQWE7QUFDekIsU0FBUyxrQkFBa0I7QUFHM0IsSUFBSSxPQUFpQixDQUFDO0FBQ3RCLElBQUksVUFBb0IsQ0FBQztBQUN6QixJQUFJLFNBQW1CLENBQUM7QUFDeEIsSUFBSSxVQUFvQixDQUFDO0FBQ3pCLElBQUksUUFBa0IsQ0FBQztBQUV2QixTQUFTLGVBQWtCLFNBQXFCLElBQXdCO0FBRXBFLFFBQU0sVUFBVSxJQUFJLFFBQWUsQ0FBQyxHQUFHLFdBQVc7QUFDOUMsVUFBTSxLQUFLLFdBQVcsTUFBTTtBQUN4QixtQkFBYSxFQUFFO0FBQ2YsYUFBTyxJQUFJLE1BQU0saUJBQWlCLE1BQU0sQ0FBQztBQUFBLElBQzdDLEdBQUcsRUFBRTtBQUFBLEVBQ1QsQ0FBQztBQUdELFNBQU8sUUFBUSxLQUFLLENBQUMsU0FBUyxPQUFPLENBQUM7QUFDMUM7QUFFQSxlQUFlLGdDQUFnQyxLQUFnQztBQUMzRSxNQUFJO0FBR0EsVUFBTSxXQUFXLE1BQU0sZUFBZSxNQUFNLElBQUksR0FBRyxHQUFHLEdBQUk7QUFFMUQsVUFBTSxJQUFZLGFBQUssU0FBUyxJQUFJO0FBR3BDLFVBQU0sUUFBUSxFQUFFLEdBQUc7QUFDbkIsVUFBTSxRQUFrQixDQUFDO0FBRXpCLFVBQU0sS0FBSyxDQUFDLEdBQUcsU0FBUztBQUNwQixZQUFNLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxNQUFNO0FBQ2hDLFVBQUksTUFBTTtBQUNOLFlBQUksS0FBSyxTQUFTLFVBQVUsR0FBRztBQUMzQixnQkFBTSxLQUFLLElB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

	