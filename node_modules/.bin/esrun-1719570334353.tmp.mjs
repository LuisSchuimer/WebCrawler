process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719570334353.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// getimg.ts
import * as fs from "fs";
import * as readline from "readline";
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
import * as path from "path";
async function readLinesFromFile(filePath) {
  const fileStream = fs.createReadStream(filePath);
  const rl = readline.createInterface({
    input: fileStream,
    crlfDelay: Infinity
  });
  const lines = [];
  for await (const line of rl) {
    lines.push(line);
  }
  return lines;
}
function extractUrls(lines) {
  const urls = [];
  const urlPattern = /Got: (https?:\/\/[^\s]+)/;
  for (const line of lines) {
    const match = line.match(urlPattern);
    if (match && match[1]) {
      urls.push(match[1]);
    }
  }
  return urls;
}
async function fetchHtml(url) {
  const response = await axios.get(url);
  return response.data;
}
function extractImageUrls(html) {
  const $ = cheerio.load(html);
  const imageUrls = [];
  $("img").each((_, img) => {
    let src = $(img).attr("src");
    if (src) {
      if (src.startsWith("//")) {
        src = "http:" + src;
      }
      imageUrls.push(src);
    }
  });
  return imageUrls;
}
async function downloadImage(url, folder) {
  const response = await axios.get(url, { responseType: "arraybuffer" });
  const filename = path.basename(url);
  const filePath = path.join(folder, filename);
  fs.writeFileSync(filePath, response.data);
  console.log(`Downloaded: ${filename}`);
}
async function main() {
  const filePath = "log.txt";
  const downloadFolder = "images";
  if (!fs.existsSync(downloadFolder)) {
    fs.mkdirSync(downloadFolder);
  }
  const lines = await readLinesFromFile(filePath);
  const urls = extractUrls(lines);
  console.log(`Found ${urls.length} URLs to process.`);
  for (let i = 0; i < urls.length; i++) {
    const url = urls[i];
    console.log(`Processing ${i + 1}/${urls.length}: ${url}`);
    try {
      const html = await fetchHtml(url);
      const imageUrls = extractImageUrls(html);
      console.log(`Found ${imageUrls.length} images.`);
      for (const imageUrl of imageUrls) {
        await downloadImage(imageUrl, downloadFolder);
      }
    } catch (error) {
      console.error(`Failed to fetch or process ${url}:`, error.message);
    }
  }
}
main().catch((error) => console.error("Error in main function:", error));
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiZ2V0aW1nLnRzIl0sCiAgInNvdXJjZVJvb3QiOiAiQzpcXFVzZXJzXFxwMDFcXEdJVEhVQlxcVHlwZVNjcmlwdDIiLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xyXG5pbXBvcnQgKiBhcyByZWFkbGluZSBmcm9tICdyZWFkbGluZSc7XHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCAqIGFzIGNoZWVyaW8gZnJvbSAnY2hlZXJpbyc7XHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XHJcblxyXG4vLyBSZWFkIHRoZSB0ZXh0IGZpbGUgbGluZSBieSBsaW5lXHJcbmFzeW5jIGZ1bmN0aW9uIHJlYWRMaW5lc0Zyb21GaWxlKGZpbGVQYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XHJcbiAgICBjb25zdCBmaWxlU3RyZWFtID0gZnMuY3JlYXRlUmVhZFN0cmVhbShmaWxlUGF0aCk7XHJcbiAgICBjb25zdCBybCA9IHJlYWRsaW5lLmNyZWF0ZUludGVyZmFjZSh7XHJcbiAgICAgICAgaW5wdXQ6IGZpbGVTdHJlYW0sXHJcbiAgICAgICAgY3JsZkRlbGF5OiBJbmZpbml0eSxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGxpbmVzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgZm9yIGF3YWl0IChjb25zdCBsaW5lIG9mIHJsKSB7XHJcbiAgICAgICAgbGluZXMucHVzaChsaW5lKTtcclxuICAgIH1cclxuICAgIHJldHVybiBsaW5lcztcclxufVxyXG5cclxuLy8gRXh0cmFjdCBVUkxzIGZyb20gZWFjaCBsaW5lXHJcbmZ1bmN0aW9uIGV4dHJhY3RVcmxzKGxpbmVzOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IHVybHM6IHN0cmluZ1tdID0gW107XHJcbiAgICBjb25zdCB1cmxQYXR0ZXJuID0gL0dvdDogKGh0dHBzPzpcXC9cXC9bXlxcc10rKS87XHJcbiAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcclxuICAgICAgICBjb25zdCBtYXRjaCA9IGxpbmUubWF0Y2godXJsUGF0dGVybik7XHJcbiAgICAgICAgaWYgKG1hdGNoICYmIG1hdGNoWzFdKSB7XHJcbiAgICAgICAgICAgIHVybHMucHVzaChtYXRjaFsxXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVybHM7XHJcbn1cclxuXHJcbi8vIEZldGNoIEhUTUwgY29udGVudCBmcm9tIGEgVVJMXHJcbmFzeW5jIGZ1bmN0aW9uIGZldGNoSHRtbCh1cmw6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwpO1xyXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XHJcbn1cclxuXHJcbi8vIEV4dHJhY3QgaW1hZ2UgVVJMcyBmcm9tIEhUTUwgY29udGVudFxyXG5mdW5jdGlvbiBleHRyYWN0SW1hZ2VVcmxzKGh0bWw6IHN0cmluZyk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0ICQgPSBjaGVlcmlvLmxvYWQoaHRtbCk7XHJcbiAgICBjb25zdCBpbWFnZVVybHM6IHN0cmluZ1tdID0gW107XHJcbiAgICAkKCdpbWcnKS5lYWNoKChfLCBpbWcpID0+IHtcclxuICAgICAgICBsZXQgc3JjID0gJChpbWcpLmF0dHIoJ3NyYycpO1xyXG4gICAgICAgIGlmIChzcmMpIHtcclxuICAgICAgICAgICAgaWYgKHNyYy5zdGFydHNXaXRoKCcvLycpKSB7XHJcbiAgICAgICAgICAgICAgICBzcmMgPSAnaHR0cDonICsgc3JjO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGltYWdlVXJscy5wdXNoKHNyYyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gaW1hZ2VVcmxzO1xyXG59XHJcblxyXG4vLyBEb3dubG9hZCBhbiBpbWFnZSBhbmQgc2F2ZSBpdCB0byB0aGUgc3BlY2lmaWVkIGZvbGRlclxyXG5hc3luYyBmdW5jdGlvbiBkb3dubG9hZEltYWdlKHVybDogc3RyaW5nLCBmb2xkZXI6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsLCB7IHJlc3BvbnNlVHlwZTogJ2FycmF5YnVmZmVyJyB9KTtcclxuICAgIGNvbnN0IGZpbGVuYW1lID0gcGF0aC5iYXNlbmFtZSh1cmwpO1xyXG4gICAgY29uc3QgZmlsZVBhdGggPSBwYXRoLmpvaW4oZm9sZGVyLCBmaWxlbmFtZSk7XHJcbiAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGVQYXRoLCByZXNwb25zZS5kYXRhKTtcclxuICAgIGNvbnNvbGUubG9nKGBEb3dubG9hZGVkOiAke2ZpbGVuYW1lfWApO1xyXG59XHJcblxyXG4vLyBNYWluIGZ1bmN0aW9uXHJcbmFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XHJcbiAgICBjb25zdCBmaWxlUGF0aCA9ICdsb2cudHh0JzsgLy8gUGF0aCB0byB5b3VyIHRleHQgZmlsZVxyXG4gICAgY29uc3QgZG93bmxvYWRGb2xkZXIgPSAnaW1hZ2VzJzsgLy8gRm9sZGVyIHRvIHNhdmUgaW1hZ2VzXHJcblxyXG4gICAgLy8gQ3JlYXRlIGRvd25sb2FkIGZvbGRlciBpZiBpdCBkb2Vzbid0IGV4aXN0XHJcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZG93bmxvYWRGb2xkZXIpKSB7XHJcbiAgICAgICAgZnMubWtkaXJTeW5jKGRvd25sb2FkRm9sZGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBsaW5lcyA9IGF3YWl0IHJlYWRMaW5lc0Zyb21GaWxlKGZpbGVQYXRoKTtcclxuICAgIGNvbnN0IHVybHMgPSBleHRyYWN0VXJscyhsaW5lcyk7XHJcblxyXG4gICAgY29uc29sZS5sb2coYEZvdW5kICR7dXJscy5sZW5ndGh9IFVSTHMgdG8gcHJvY2Vzcy5gKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCB1cmwgPSB1cmxzW2ldO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBQcm9jZXNzaW5nICR7aSArIDF9LyR7dXJscy5sZW5ndGh9OiAke3VybH1gKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBodG1sID0gYXdhaXQgZmV0Y2hIdG1sKHVybCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGltYWdlVXJscyA9IGV4dHJhY3RJbWFnZVVybHMoaHRtbCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBGb3VuZCAke2ltYWdlVXJscy5sZW5ndGh9IGltYWdlcy5gKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaW1hZ2VVcmwgb2YgaW1hZ2VVcmxzKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBkb3dubG9hZEltYWdlKGltYWdlVXJsLCBkb3dubG9hZEZvbGRlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggb3IgcHJvY2VzcyAke3VybH06YCwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5tYWluKCkuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcignRXJyb3IgaW4gbWFpbiBmdW5jdGlvbjonLCBlcnJvcikpO1xyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsWUFBWSxRQUFRO0FBQ3BCLFlBQVksY0FBYztBQUMxQixPQUFPLFdBQVc7QUFDbEIsWUFBWSxhQUFhO0FBQ3pCLFlBQVksVUFBVTtBQUd0QixlQUFlLGtCQUFrQixVQUFxQztBQUNsRSxRQUFNLGFBQWdCLG9CQUFpQixRQUFRO0FBQy9DLFFBQU0sS0FBYyx5QkFBZ0I7QUFBQSxJQUNoQyxPQUFPO0FBQUEsSUFDUCxXQUFXO0FBQUEsRUFDZixDQUFDO0FBRUQsUUFBTSxRQUFrQixDQUFDO0FBQ3pCLG1CQUFpQixRQUFRLElBQUk7QUFDekIsVUFBTSxLQUFLLElBQUk7QUFBQSxFQUNuQjtBQUNBLFNBQU87QUFDWDtBQUdBLFNBQVMsWUFBWSxPQUEyQjtBQUM1QyxRQUFNLE9BQWlCLENBQUM7QUFDeEIsUUFBTSxhQUFhO0FBQ25CLGFBQVcsUUFBUSxPQUFPO0FBQ3RCLFVBQU0sUUFBUSxLQUFLLE1BQU0sVUFBVTtBQUNuQyxRQUFJLFNBQVMsTUFBTSxDQUFDLEdBQUc7QUFDbkIsV0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDO0FBQUEsSUFDdEI7QUFBQSxFQUNKO0FBQ0EsU0FBTztBQUNYO0FBR0EsZUFBZSxVQUFVLEtBQThCO0FBQ25ELFFBQU0sV0FBVyxNQUFNLE1BQU0sSUFBSSxHQUFHO0FBQ3BDLFNBQU8sU0FBUztBQUNwQjtBQUdBLFNBQVMsaUJBQWlCLE1BQXdCO0FBQzlDLFFBQU0sSUFBWSxhQUFLLElBQUk7QUFDM0IsUUFBTSxZQUFzQixDQUFDO0FBQzdCLElBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxHQUFHLFFBQVE7QUFDdEIsUUFBSSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssS0FBSztBQUMzQixRQUFJLEtBQUs7QUFDTCxVQUFJLElBQUksV0FBVyxJQUFJLEdBQUc7QUFDdEIsY0FBTSxVQUFVO0FBQUEsTUFDcEI7QUFDQSxnQkFBVSxLQUFLLEdBQUc7QUFBQSxJQUN0QjtBQUFBLEVBQ0osQ0FBQztBQUNELFNBQU87QUFDWDtBQUdBLGVBQWUsY0FBYyxLQUFhLFFBQStCO0FBQ3JFLFFBQU0sV0FBVyxNQUFNLE1BQU0sSUFBSSxLQUFLLEVBQUUsY0FBYyxjQUFjLENBQUM7QUFDckUsUUFBTSxXQUFnQixjQUFTLEdBQUc7QUFDbEMsUUFBTSxXQUFnQixVQUFLLFFBQVEsUUFBUTtBQUMzQyxFQUFHLGlCQUFjLFVBQVUsU0FBUyxJQUFJO0FBQ3hDLFVBQVEsSUFBSSxlQUFlLFVBQVU7QUFDekM7QUFHQSxlQUFlLE9BQU87QUFDbEIsUUFBTSxXQUFXO0FBQ2pCLFFBQU0saUJBQWlCO0FBR3ZCLE1BQUksQ0FBSSxjQUFXLGNBQWMsR0FBRztBQUNoQyxJQUFHLGFBQVUsY0FBYztBQUFBLEVBQy9CO0FBRUEsUUFBTSxRQUFRLE1BQU0sa0JBQWtCLFFBQVE7QUFDOUMsUUFBTSxPQUFPLFlBQVksS0FBSztBQUU5QixVQUFRLElBQUksU0FBUyxLQUFLLHlCQUF5QjtBQUVuRCxXQUFTLElBQUksR0FBRyxJQUFJLEtBQUssUUFBUSxLQUFLO0FBQ2xDLFVBQU0sTUFBTSxLQUFLLENBQUM7QUFDbEIsWUFBUSxJQUFJLGNBQWMsSUFBSSxLQUFLLEtBQUssV0FBVyxLQUFLO0FBQ3hELFFBQUk7QUFDQSxZQUFNLE9BQU8sTUFBTSxVQUFVLEdBQUc7QUFDaEMsWUFBTSxZQUFZLGlCQUFpQixJQUFJO0FBQ3ZDLGNBQVEsSUFBSSxTQUFTLFVBQVUsZ0JBQWdCO0FBRS9DLGlCQUFXLFlBQVksV0FBVztBQUM5QixjQUFNLGNBQWMsVUFBVSxjQUFjO0FBQUEsTUFDaEQ7QUFBQSxJQUNKLFNBQVMsT0FBUDtBQUNFLGNBQVEsTUFBTSw4QkFBOEIsUUFBUSxNQUFNLE9BQU87QUFBQSxJQUNyRTtBQUFBLEVBQ0o7QUFDSjtBQUVBLEtBQUssRUFBRSxNQUFNLFdBQVMsUUFBUSxNQUFNLDJCQUEyQixLQUFLLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==

	