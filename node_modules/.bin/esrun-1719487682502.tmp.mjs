process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719487682502.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// main.ts
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
import { appendFile } from "fs";
var line = [];
var watched = [];
var removed = [];
async function scrapeHrefAttributesFromWebsite(url) {
  try {
    const response = await axios.get(url);
    const $ = cheerio.load(response.data);
    const links = $("a");
    const hrefs = [];
    links.each((_, link) => {
      const href = $(link).attr("href");
      if (href) {
        if (href.includes("https://")) {
          hrefs.push(href);
        } else {
          hrefs.push(getBaseUrl(url) + href);
        }
      }
    });
    return hrefs;
  } catch (error) {
    return [];
  }
}
function getBaseUrl(url) {
  try {
    const parsedUrl = new URL(url);
    return `${parsedUrl.protocol}//${parsedUrl.hostname}`;
  } catch (error) {
    return "";
  }
}
(async () => {
  const url = "https://youtube.com";
  const hrefs = await scrapeHrefAttributesFromWebsite(url);
  hrefs.forEach((element) => {
    if (url !== element) {
      line.push(element);
    }
  });
  console.log(`${line.length}`);
  while (line.length !== 0) {
    const currentUrl = line.shift();
    if (!currentUrl)
      continue;
    try {
      if (!watched.includes(currentUrl)) {
        const hrefs2 = await scrapeHrefAttributesFromWebsite(currentUrl);
        hrefs2.forEach((element) => {
          if (url != element) {
            if (!watched.includes(element)) {
              line.push(element);
            } else {
              removed.push(element);
            }
          }
        });
        line.forEach((element) => {
          if (watched.includes(element)) {
            line.splice(line.indexOf(element), 1);
            removed.push(element);
          }
        });
        watched.push(currentUrl);
        appendFile("log.txt", `${line.length} in queue; ${watched.length} watched; ${removed.length} removed; ${removed.length + watched.length} processed; Base: ${getBaseUrl(currentUrl)}: Got: ${currentUrl} 
`, function(err) {
          if (err) {
          } else {
            console.log(`${line.length} in queue; ${watched.length} watched; ${removed.length} removed; ${removed.length + watched.length} processed; Base: ${getBaseUrl(currentUrl)}`);
          }
        });
      } else {
        removed.push(currentUrl);
      }
    } catch (error) {
      continue;
    }
  }
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VSb290IjogIkM6XFxVc2Vyc1xccDAxXFxHSVRIVUJcXFR5cGVTY3JpcHQyIiwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0ICogYXMgY2hlZXJpbyBmcm9tIFwiY2hlZXJpb1wiO1xyXG5pbXBvcnQgeyBhcHBlbmRGaWxlIH0gZnJvbSBcImZzXCI7XHJcblxyXG5cclxubGV0IGxpbmU6IHN0cmluZ1tdID0gW107XHJcbmxldCB3YXRjaGVkOiBzdHJpbmdbXSA9IFtdO1xyXG5sZXQgcmVtb3ZlZDogc3RyaW5nW10gPSBbXTtcclxuXHJcblxyXG5hc3luYyBmdW5jdGlvbiBzY3JhcGVIcmVmQXR0cmlidXRlc0Zyb21XZWJzaXRlKHVybDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBGZXRjaCB0aGUgd2VicGFnZSBjb250ZW50XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBMb2FkIHRoZSBmZXRjaGVkIEhUTUwgY29udGVudCBpbnRvIENoZWVyaW9cclxuICAgICAgICBjb25zdCAkID0gY2hlZXJpby5sb2FkKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFNlbGVjdCBhbGwgPGE+IHRhZ3MgYW5kIGV4dHJhY3QgaHJlZiBhdHRyaWJ1dGVzXHJcbiAgICAgICAgY29uc3QgbGlua3MgPSAkKCdhJyk7IC8vIEFkanVzdCB0aGUgc2VsZWN0b3IgYXMgbmVlZGVkXHJcbiAgICAgICAgY29uc3QgaHJlZnM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgICAgIGxpbmtzLmVhY2goKF8sIGxpbmspID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaHJlZiA9ICQobGluaykuYXR0cignaHJlZicpO1xyXG4gICAgICAgICAgICBpZiAoaHJlZikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGhyZWYuaW5jbHVkZXMoXCJodHRwczovL1wiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhyZWZzLnB1c2goaHJlZik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGhyZWZzLnB1c2goZ2V0QmFzZVVybCh1cmwpICsgaHJlZik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGhyZWZzO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBnZXRCYXNlVXJsKHVybDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xyXG4gICAgICAgIHJldHVybiBgJHtwYXJzZWRVcmwucHJvdG9jb2x9Ly8ke3BhcnNlZFVybC5ob3N0bmFtZX1gO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEV4YW1wbGUgdXNhZ2VcclxuKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHVybCA9ICdodHRwczovL3lvdXR1YmUuY29tJztcclxuICAgIGNvbnN0IGhyZWZzID0gYXdhaXQgc2NyYXBlSHJlZkF0dHJpYnV0ZXNGcm9tV2Vic2l0ZSh1cmwpO1xyXG5cclxuICAgIGhyZWZzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgaWYgKHVybCAhPT0gZWxlbWVudCkge1xyXG4gICAgICAgICAgICBsaW5lLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc29sZS5sb2coYCR7bGluZS5sZW5ndGh9YCk7XHJcblxyXG4gICAgd2hpbGUgKGxpbmUubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGFzeW5jIGZ1bmN0aW9uIHRvIGNvbXBsZXRlXHJcbiAgICAgICAgY29uc3QgY3VycmVudFVybCA9IGxpbmUuc2hpZnQoKTsgLy8gR2V0IGFuZCByZW1vdmUgdGhlIGZpcnN0IGVsZW1lbnQgZnJvbSB0aGUgbGluZSBhcnJheVxyXG4gICAgICAgIGlmICghY3VycmVudFVybCkgY29udGludWU7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghd2F0Y2hlZC5pbmNsdWRlcyhjdXJyZW50VXJsKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaHJlZnMgPSBhd2FpdCBzY3JhcGVIcmVmQXR0cmlidXRlc0Zyb21XZWJzaXRlKGN1cnJlbnRVcmwpO1xyXG4gICAgICAgICAgICAgICAgaHJlZnMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXJsICE9IGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3YXRjaGVkLmluY2x1ZGVzKGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGxpbmUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3YXRjaGVkLmluY2x1ZGVzKGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUuc3BsaWNlKGxpbmUuaW5kZXhPZihlbGVtZW50KSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB3YXRjaGVkLnB1c2goY3VycmVudFVybCk7XHJcbiAgICAgICAgICAgICAgICBhcHBlbmRGaWxlKFwibG9nLnR4dFwiLCBgJHtsaW5lLmxlbmd0aH0gaW4gcXVldWU7ICR7d2F0Y2hlZC5sZW5ndGh9IHdhdGNoZWQ7ICR7cmVtb3ZlZC5sZW5ndGh9IHJlbW92ZWQ7ICR7cmVtb3ZlZC5sZW5ndGggKyB3YXRjaGVkLmxlbmd0aH0gcHJvY2Vzc2VkOyBCYXNlOiAke2dldEJhc2VVcmwoY3VycmVudFVybCl9OiBHb3Q6ICR7Y3VycmVudFVybH0gXFxuYCwgZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhcHBlbmQgZmFpbGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkb25lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2xpbmUubGVuZ3RofSBpbiBxdWV1ZTsgJHt3YXRjaGVkLmxlbmd0aH0gd2F0Y2hlZDsgJHtyZW1vdmVkLmxlbmd0aH0gcmVtb3ZlZDsgJHtyZW1vdmVkLmxlbmd0aCArIHdhdGNoZWQubGVuZ3RofSBwcm9jZXNzZWQ7IEJhc2U6ICR7Z2V0QmFzZVVybChjdXJyZW50VXJsKX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlZC5wdXNoKGN1cnJlbnRVcmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpO1xyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsT0FBTyxXQUFXO0FBQ2xCLFlBQVksYUFBYTtBQUN6QixTQUFTLGtCQUFrQjtBQUczQixJQUFJLE9BQWlCLENBQUM7QUFDdEIsSUFBSSxVQUFvQixDQUFDO0FBQ3pCLElBQUksVUFBb0IsQ0FBQztBQUd6QixlQUFlLGdDQUFnQyxLQUFnQztBQUMzRSxNQUFJO0FBRUEsVUFBTSxXQUFXLE1BQU0sTUFBTSxJQUFJLEdBQUc7QUFHcEMsVUFBTSxJQUFZLGFBQUssU0FBUyxJQUFJO0FBR3BDLFVBQU0sUUFBUSxFQUFFLEdBQUc7QUFDbkIsVUFBTSxRQUFrQixDQUFDO0FBRXpCLFVBQU0sS0FBSyxDQUFDLEdBQUcsU0FBUztBQUNwQixZQUFNLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxNQUFNO0FBQ2hDLFVBQUksTUFBTTtBQUNOLFlBQUksS0FBSyxTQUFTLFVBQVUsR0FBRztBQUMzQixnQkFBTSxLQUFLLElBQUk7QUFBQSxRQUNuQixPQUFPO0FBQ0gsZ0JBQU0sS0FBSyxXQUFXLEdBQUcsSUFBSSxJQUFJO0FBQUEsUUFDckM7QUFBQSxNQUNKO0FBQUEsSUFDSixDQUFDO0FBRUQsV0FBTztBQUFBLEVBQ1gsU0FBUyxPQUFQO0FBQ0UsV0FBTyxDQUFDO0FBQUEsRUFDWjtBQUNKO0FBR0EsU0FBUyxXQUFXLEtBQXFCO0FBQ3JDLE1BQUk7QUFDQSxVQUFNLFlBQVksSUFBSSxJQUFJLEdBQUc7QUFDN0IsV0FBTyxHQUFHLFVBQVUsYUFBYSxVQUFVO0FBQUEsRUFDL0MsU0FBUyxPQUFQO0FBQ0UsV0FBTztBQUFBLEVBQ1g7QUFDSjtBQUFBLENBR0MsWUFBWTtBQUNULFFBQU0sTUFBTTtBQUNaLFFBQU0sUUFBUSxNQUFNLGdDQUFnQyxHQUFHO0FBRXZELFFBQU0sUUFBUSxhQUFXO0FBQ3JCLFFBQUksUUFBUSxTQUFTO0FBQ2pCLFdBQUssS0FBSyxPQUFPO0FBQUEsSUFDckI7QUFBQSxFQUNKLENBQUM7QUFFRCxVQUFRLElBQUksR0FBRyxLQUFLLFFBQVE7QUFFNUIsU0FBTyxLQUFLLFdBQVcsR0FBRztBQUV0QixVQUFNLGFBQWEsS0FBSyxNQUFNO0FBQzlCLFFBQUksQ0FBQztBQUFZO0FBRWpCLFFBQUk7QUFDQSxVQUFJLENBQUMsUUFBUSxTQUFTLFVBQVUsR0FBRztBQUMvQixjQUFNQSxTQUFRLE1BQU0sZ0NBQWdDLFVBQVU7QUFDOUQsUUFBQUEsT0FBTSxRQUFRLGFBQVc7QUFDckIsY0FBSSxPQUFPLFNBQVM7QUFDaEIsZ0JBQUksQ0FBQyxRQUFRLFNBQVMsT0FBTyxHQUFHO0FBQzVCLG1CQUFLLEtBQUssT0FBTztBQUFBLFlBQ3JCLE9BQU07QUFDRixzQkFBUSxLQUFLLE9BQU87QUFBQSxZQUN4QjtBQUFBLFVBQ0o7QUFBQSxRQUNKLENBQUM7QUFFRCxhQUFLLFFBQVEsQ0FBQyxZQUFZO0FBQ3RCLGNBQUksUUFBUSxTQUFTLE9BQU8sR0FBRztBQUMzQixpQkFBSyxPQUFPLEtBQUssUUFBUSxPQUFPLEdBQUcsQ0FBQztBQUNwQyxvQkFBUSxLQUFLLE9BQU87QUFBQSxVQUN4QjtBQUFBLFFBQ0osQ0FBQztBQUdELGdCQUFRLEtBQUssVUFBVTtBQUN2QixtQkFBVyxXQUFXLEdBQUcsS0FBSyxvQkFBb0IsUUFBUSxtQkFBbUIsUUFBUSxtQkFBbUIsUUFBUSxTQUFTLFFBQVEsMkJBQTJCLFdBQVcsVUFBVSxXQUFXO0FBQUEsR0FBaUIsU0FBUyxLQUFLO0FBQ3ZOLGNBQUksS0FBSztBQUFBLFVBRVAsT0FBTztBQUVMLG9CQUFRLElBQUksR0FBRyxLQUFLLG9CQUFvQixRQUFRLG1CQUFtQixRQUFRLG1CQUFtQixRQUFRLFNBQVMsUUFBUSwyQkFBMkIsV0FBVyxVQUFVLEdBQUc7QUFBQSxVQUM1SztBQUFBLFFBRU4sQ0FBQztBQUFBLE1BR0wsT0FBTTtBQUNGLGdCQUFRLEtBQUssVUFBVTtBQUFBLE1BQzNCO0FBQUEsSUFDSixTQUFTLE9BQVA7QUFDRTtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQ0osR0FBRzsiLAogICJuYW1lcyI6IFsiaHJlZnMiXQp9Cg==

	