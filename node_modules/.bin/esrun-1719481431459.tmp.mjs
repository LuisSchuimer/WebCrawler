process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719481431459.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// main.ts
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
import { appendFile } from "fs";
var line = [];
var watched = [];
var removed = [];
async function scrapeHrefAttributesFromWebsite(url) {
  try {
    const response = await axios.get(url);
    const $ = cheerio.load(response.data);
    const links = $("a");
    const hrefs = [];
    links.each((_, link) => {
      const href = $(link).attr("href");
      if (href) {
        if (href.includes("https://")) {
          hrefs.push(href);
        } else {
          hrefs.push(getBaseUrl(url) + href);
        }
      }
    });
    return hrefs;
  } catch (error) {
    return [];
  }
}
function getBaseUrl(url) {
  try {
    const parsedUrl = new URL(url);
    return `${parsedUrl.protocol}//${parsedUrl.hostname}`;
  } catch (error) {
    console.error(`Invalid URL: ${url}`);
    return "";
  }
}
(async () => {
  const url = "https://tagesschau.de";
  const hrefs = await scrapeHrefAttributesFromWebsite(url);
  hrefs.forEach((element) => {
    if (url !== element) {
      line.push(element);
    }
  });
  console.log(`${line.length}`);
  while (line.length !== 0) {
    const currentUrl = line.shift();
    if (!currentUrl)
      continue;
    try {
      if (!watched.includes(currentUrl)) {
        const hrefs2 = await scrapeHrefAttributesFromWebsite(currentUrl);
        hrefs2.forEach((element) => {
          if (url != element) {
            if (!watched.includes(element)) {
              line.push(element);
            } else {
              removed.push(element);
            }
          }
        });
        line.forEach((element) => {
          if (watched.includes(element)) {
            line.splice(line.indexOf(element), 1);
            removed.push(element);
          }
        });
        watched.push(currentUrl);
        appendFile("log2.txt", `${line.length} left; ${watched.length} watched; ${removed.length} removed; Base: ${getBaseUrl(currentUrl)}: Got: ${currentUrl} 
`, function(err) {
          if (err) {
          } else {
            console.log(`${line.length} left; ${watched.length} watched; ${removed.length} removed; Base: ${getBaseUrl(currentUrl)}: Got: ${currentUrl}`);
          }
        });
      } else {
        removed.push(currentUrl);
      }
    } catch (error) {
      continue;
    }
  }
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VSb290IjogIkM6XFxVc2Vyc1xccDAxXFxHSVRIVUJcXFR5cGVTY3JpcHQyIiwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0ICogYXMgY2hlZXJpbyBmcm9tIFwiY2hlZXJpb1wiO1xyXG5pbXBvcnQgeyBhcHBlbmRGaWxlIH0gZnJvbSBcImZzXCI7XHJcblxyXG5sZXQgbGluZTogc3RyaW5nW10gPSBbXTtcclxubGV0IHdhdGNoZWQ6IHN0cmluZ1tdID0gW107XHJcbmxldCByZW1vdmVkOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gc2NyYXBlSHJlZkF0dHJpYnV0ZXNGcm9tV2Vic2l0ZSh1cmw6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy8gRmV0Y2ggdGhlIHdlYnBhZ2UgY29udGVudFxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gTG9hZCB0aGUgZmV0Y2hlZCBIVE1MIGNvbnRlbnQgaW50byBDaGVlcmlvXHJcbiAgICAgICAgY29uc3QgJCA9IGNoZWVyaW8ubG9hZChyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBTZWxlY3QgYWxsIDxhPiB0YWdzIGFuZCBleHRyYWN0IGhyZWYgYXR0cmlidXRlc1xyXG4gICAgICAgIGNvbnN0IGxpbmtzID0gJCgnYScpOyAvLyBBZGp1c3QgdGhlIHNlbGVjdG9yIGFzIG5lZWRlZFxyXG4gICAgICAgIGNvbnN0IGhyZWZzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICBsaW5rcy5lYWNoKChfLCBsaW5rKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhyZWYgPSAkKGxpbmspLmF0dHIoJ2hyZWYnKTtcclxuICAgICAgICAgICAgaWYgKGhyZWYpIHtcclxuICAgICAgICAgICAgICAgIGlmIChocmVmLmluY2x1ZGVzKFwiaHR0cHM6Ly9cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBocmVmcy5wdXNoKGhyZWYpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBocmVmcy5wdXNoKGdldEJhc2VVcmwodXJsKSArIGhyZWYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBocmVmcztcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0QmFzZVVybCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlZFVybCA9IG5ldyBVUkwodXJsKTtcclxuICAgICAgICByZXR1cm4gYCR7cGFyc2VkVXJsLnByb3RvY29sfS8vJHtwYXJzZWRVcmwuaG9zdG5hbWV9YDtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgSW52YWxpZCBVUkw6ICR7dXJsfWApO1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxufVxyXG5cclxuLy8gRXhhbXBsZSB1c2FnZVxyXG4oYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgdXJsID0gJ2h0dHBzOi8vdGFnZXNzY2hhdS5kZSc7XHJcbiAgICBjb25zdCBocmVmcyA9IGF3YWl0IHNjcmFwZUhyZWZBdHRyaWJ1dGVzRnJvbVdlYnNpdGUodXJsKTtcclxuXHJcbiAgICBocmVmcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgIGlmICh1cmwgIT09IGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgbGluZS5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGAke2xpbmUubGVuZ3RofWApO1xyXG5cclxuICAgIHdoaWxlIChsaW5lLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgIC8vIFdhaXQgZm9yIHRoZSBhc3luYyBmdW5jdGlvbiB0byBjb21wbGV0ZVxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRVcmwgPSBsaW5lLnNoaWZ0KCk7IC8vIEdldCBhbmQgcmVtb3ZlIHRoZSBmaXJzdCBlbGVtZW50IGZyb20gdGhlIGxpbmUgYXJyYXlcclxuICAgICAgICBpZiAoIWN1cnJlbnRVcmwpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoIXdhdGNoZWQuaW5jbHVkZXMoY3VycmVudFVybCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhyZWZzID0gYXdhaXQgc2NyYXBlSHJlZkF0dHJpYnV0ZXNGcm9tV2Vic2l0ZShjdXJyZW50VXJsKTtcclxuICAgICAgICAgICAgICAgIGhyZWZzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVybCAhPSBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghd2F0Y2hlZC5pbmNsdWRlcyhlbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBsaW5lLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAod2F0Y2hlZC5pbmNsdWRlcyhlbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLnNwbGljZShsaW5lLmluZGV4T2YoZWxlbWVudCksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgd2F0Y2hlZC5wdXNoKGN1cnJlbnRVcmwpO1xyXG4gICAgICAgICAgICAgICAgYXBwZW5kRmlsZShcImxvZzIudHh0XCIsIGAke2xpbmUubGVuZ3RofSBsZWZ0OyAke3dhdGNoZWQubGVuZ3RofSB3YXRjaGVkOyAke3JlbW92ZWQubGVuZ3RofSByZW1vdmVkOyBCYXNlOiAke2dldEJhc2VVcmwoY3VycmVudFVybCl9OiBHb3Q6ICR7Y3VycmVudFVybH0gXFxuYCwgZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhcHBlbmQgZmFpbGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkb25lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2xpbmUubGVuZ3RofSBsZWZ0OyAke3dhdGNoZWQubGVuZ3RofSB3YXRjaGVkOyAke3JlbW92ZWQubGVuZ3RofSByZW1vdmVkOyBCYXNlOiAke2dldEJhc2VVcmwoY3VycmVudFVybCl9OiBHb3Q6ICR7Y3VycmVudFVybH1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlZC5wdXNoKGN1cnJlbnRVcmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpO1xyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsT0FBTyxXQUFXO0FBQ2xCLFlBQVksYUFBYTtBQUN6QixTQUFTLGtCQUFrQjtBQUUzQixJQUFJLE9BQWlCLENBQUM7QUFDdEIsSUFBSSxVQUFvQixDQUFDO0FBQ3pCLElBQUksVUFBb0IsQ0FBQztBQUV6QixlQUFlLGdDQUFnQyxLQUFnQztBQUMzRSxNQUFJO0FBRUEsVUFBTSxXQUFXLE1BQU0sTUFBTSxJQUFJLEdBQUc7QUFHcEMsVUFBTSxJQUFZLGFBQUssU0FBUyxJQUFJO0FBR3BDLFVBQU0sUUFBUSxFQUFFLEdBQUc7QUFDbkIsVUFBTSxRQUFrQixDQUFDO0FBRXpCLFVBQU0sS0FBSyxDQUFDLEdBQUcsU0FBUztBQUNwQixZQUFNLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxNQUFNO0FBQ2hDLFVBQUksTUFBTTtBQUNOLFlBQUksS0FBSyxTQUFTLFVBQVUsR0FBRztBQUMzQixnQkFBTSxLQUFLLElBQUk7QUFBQSxRQUNuQixPQUFPO0FBQ0gsZ0JBQU0sS0FBSyxXQUFXLEdBQUcsSUFBSSxJQUFJO0FBQUEsUUFDckM7QUFBQSxNQUNKO0FBQUEsSUFDSixDQUFDO0FBRUQsV0FBTztBQUFBLEVBQ1gsU0FBUyxPQUFQO0FBQ0UsV0FBTyxDQUFDO0FBQUEsRUFDWjtBQUNKO0FBR0EsU0FBUyxXQUFXLEtBQXFCO0FBQ3JDLE1BQUk7QUFDQSxVQUFNLFlBQVksSUFBSSxJQUFJLEdBQUc7QUFDN0IsV0FBTyxHQUFHLFVBQVUsYUFBYSxVQUFVO0FBQUEsRUFDL0MsU0FBUyxPQUFQO0FBQ0UsWUFBUSxNQUFNLGdCQUFnQixLQUFLO0FBQ25DLFdBQU87QUFBQSxFQUNYO0FBQ0o7QUFBQSxDQUdDLFlBQVk7QUFDVCxRQUFNLE1BQU07QUFDWixRQUFNLFFBQVEsTUFBTSxnQ0FBZ0MsR0FBRztBQUV2RCxRQUFNLFFBQVEsYUFBVztBQUNyQixRQUFJLFFBQVEsU0FBUztBQUNqQixXQUFLLEtBQUssT0FBTztBQUFBLElBQ3JCO0FBQUEsRUFDSixDQUFDO0FBRUQsVUFBUSxJQUFJLEdBQUcsS0FBSyxRQUFRO0FBRTVCLFNBQU8sS0FBSyxXQUFXLEdBQUc7QUFFdEIsVUFBTSxhQUFhLEtBQUssTUFBTTtBQUM5QixRQUFJLENBQUM7QUFBWTtBQUVqQixRQUFJO0FBQ0EsVUFBSSxDQUFDLFFBQVEsU0FBUyxVQUFVLEdBQUc7QUFDL0IsY0FBTUEsU0FBUSxNQUFNLGdDQUFnQyxVQUFVO0FBQzlELFFBQUFBLE9BQU0sUUFBUSxhQUFXO0FBQ3JCLGNBQUksT0FBTyxTQUFTO0FBQ2hCLGdCQUFJLENBQUMsUUFBUSxTQUFTLE9BQU8sR0FBRztBQUM1QixtQkFBSyxLQUFLLE9BQU87QUFBQSxZQUNyQixPQUFNO0FBQ0Ysc0JBQVEsS0FBSyxPQUFPO0FBQUEsWUFDeEI7QUFBQSxVQUNKO0FBQUEsUUFDSixDQUFDO0FBRUQsYUFBSyxRQUFRLENBQUMsWUFBWTtBQUN0QixjQUFJLFFBQVEsU0FBUyxPQUFPLEdBQUc7QUFDM0IsaUJBQUssT0FBTyxLQUFLLFFBQVEsT0FBTyxHQUFHLENBQUM7QUFDcEMsb0JBQVEsS0FBSyxPQUFPO0FBQUEsVUFDeEI7QUFBQSxRQUNKLENBQUM7QUFHRCxnQkFBUSxLQUFLLFVBQVU7QUFDdkIsbUJBQVcsWUFBWSxHQUFHLEtBQUssZ0JBQWdCLFFBQVEsbUJBQW1CLFFBQVEseUJBQXlCLFdBQVcsVUFBVSxXQUFXO0FBQUEsR0FBaUIsU0FBUyxLQUFLO0FBQ3RLLGNBQUksS0FBSztBQUFBLFVBRVAsT0FBTztBQUVMLG9CQUFRLElBQUksR0FBRyxLQUFLLGdCQUFnQixRQUFRLG1CQUFtQixRQUFRLHlCQUF5QixXQUFXLFVBQVUsV0FBVyxZQUFZO0FBQUEsVUFDOUk7QUFBQSxRQUVOLENBQUM7QUFBQSxNQUNMLE9BQU07QUFDRixnQkFBUSxLQUFLLFVBQVU7QUFBQSxNQUMzQjtBQUFBLElBQ0osU0FBUyxPQUFQO0FBQ0U7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUNKLEdBQUc7IiwKICAibmFtZXMiOiBbImhyZWZzIl0KfQo=

	