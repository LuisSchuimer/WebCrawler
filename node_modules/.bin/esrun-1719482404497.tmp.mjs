process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719482404497.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// main.ts
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
import { appendFile } from "fs";
var line = [];
var watched = [];
var removed = [];
async function scrapeHrefAttributesFromWebsite(url) {
  try {
    const response = await axios.get(url);
    const $ = cheerio.load(response.data);
    const links = $("a");
    const hrefs = [];
    links.each((_, link) => {
      const href = $(link).attr("href");
      if (href) {
        if (href.includes("https://")) {
          hrefs.push(href);
        } else {
          hrefs.push(getBaseUrl(url) + href);
        }
      }
    });
    return hrefs;
  } catch (error) {
    return [];
  }
}
function getBaseUrl(url) {
  try {
    const parsedUrl = new URL(url);
    return `${parsedUrl.protocol}//${parsedUrl.hostname}`;
  } catch (error) {
    console.error(`Invalid URL: ${url}`);
    return "";
  }
}
(async () => {
  appendFile("main.gmf", `[{"P": [`, function(err) {
    if (err) {
    } else {
      console.log();
    }
  });
  const url = "https://tagesschau.de";
  const hrefs = await scrapeHrefAttributesFromWebsite(url);
  hrefs.forEach((element) => {
    if (url !== element) {
      line.push(element);
    }
  });
  console.log(`${line.length}`);
  let count = 0;
  let xPos = 0;
  while (line.length !== 0) {
    const currentUrl = line.shift();
    if (!currentUrl)
      continue;
    try {
      if (!watched.includes(currentUrl)) {
        const hrefs2 = await scrapeHrefAttributesFromWebsite(currentUrl);
        hrefs2.forEach((element) => {
          if (url != element) {
            if (!watched.includes(element)) {
              line.push(element);
            } else {
              removed.push(element);
            }
          }
        });
        line.forEach((element) => {
          if (watched.includes(element)) {
            line.splice(line.indexOf(element), 1);
            removed.push(element);
          }
        });
        watched.push(currentUrl);
        appendFile("log.txt", `${line.length} left; ${watched.length} watched; ${removed.length} removed; Base: ${getBaseUrl(currentUrl)}: Got: ${currentUrl} 
`, function(err) {
          if (err) {
          } else {
            console.log(`${line.length} left; ${watched.length} watched; ${removed.length} removed; Base: ${getBaseUrl(currentUrl)}: Got: ${currentUrl}`);
          }
        });
        if (count == 5) {
          appendFile("main.gmf", `["${xPos}", "${watched.length}", true], `, function(err) {
            if (err) {
            } else {
              console.log();
            }
          });
          count = 0;
        }
        count += 1;
      } else {
        removed.push(currentUrl);
      }
    } catch (error) {
      continue;
    }
  }
})();
//# sourceMappingURL=data:application/json;base64,

	