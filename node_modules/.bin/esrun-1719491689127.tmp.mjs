process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719491689127.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// optimain.ts
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
import { appendFile } from "fs";
var line = [];
var watched = [];
var removed = [];
var error = [];
async function scrapeHrefAttributesFromWebsite(url) {
  try {
    let response = await axios.get(url);
    const $ = cheerio.load(response.data);
    const links = $("a");
    const hrefs = [];
    links.each((_, link) => {
      const href = $(link).attr("href");
      if (href) {
        if (href.includes("https://")) {
          hrefs.push(href);
        } else {
          hrefs.push(getBaseUrl(url) + href);
        }
      }
    });
    return hrefs;
  } catch (err) {
    error.push(url);
    return [];
  }
}
function getBaseUrl(url) {
  try {
    const parsedUrl = new URL(url);
    return `${parsedUrl.protocol}//${parsedUrl.hostname}`;
  } catch (error2) {
    return "";
  }
}
(async () => {
  const url = "https://stackoverflow.com";
  const hrefs = await scrapeHrefAttributesFromWebsite(url);
  hrefs.forEach((element) => {
    if (url !== element) {
      line.push(element);
    }
  });
  console.log(`${line.length}`);
  while (line.length !== 0) {
    const currentUrl = line.shift();
    if (!currentUrl)
      continue;
    try {
      if (!watched.includes(currentUrl)) {
        const hrefs2 = await scrapeHrefAttributesFromWebsite(currentUrl);
        hrefs2.forEach((element) => {
          if (url != element) {
            if (!watched.includes(element)) {
              line.push(element);
            } else {
              removed.push(element);
            }
          }
        });
        line.forEach((element) => {
          if (watched.includes(element)) {
            line.splice(line.indexOf(element), 1);
            removed.push(element);
          }
        });
        watched.push(currentUrl);
        appendFile("log1.txt", `${line.length} in queue; ${watched.length} watched; ${removed.length} removed; ${removed.length + watched.length} processed; ${error.length} with errors; Base: ${getBaseUrl(currentUrl)}: Got: ${currentUrl} 
`, function(err) {
          if (err) {
          } else {
            console.log(`${line.length} queue; ${watched.length} watched; ${removed.length} removed; ${removed.length + watched.length} processed; ${error.length} with errors; Base: ${getBaseUrl(currentUrl)}`);
          }
        });
      } else {
        removed.push(currentUrl);
      }
    } catch (err) {
      error.push(currentUrl);
      continue;
    }
  }
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsib3B0aW1haW4udHMiXSwKICAic291cmNlUm9vdCI6ICJDOlxcVXNlcnNcXHAwMVxcR0lUSFVCXFxUeXBlU2NyaXB0MiIsCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcbmltcG9ydCAqIGFzIGNoZWVyaW8gZnJvbSBcImNoZWVyaW9cIjtcclxuaW1wb3J0IHsgYXBwZW5kRmlsZSB9IGZyb20gXCJmc1wiO1xyXG5cclxuXHJcbmxldCBsaW5lOiBzdHJpbmdbXSA9IFtdO1xyXG5sZXQgd2F0Y2hlZDogc3RyaW5nW10gPSBbXTtcclxubGV0IHJlbW92ZWQ6IHN0cmluZ1tdID0gW107XHJcbmxldCBlcnJvcjogc3RyaW5nW10gPSBbXTtcclxuXHJcblxyXG5hc3luYyBmdW5jdGlvbiBzY3JhcGVIcmVmQXR0cmlidXRlc0Zyb21XZWJzaXRlKHVybDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBcclxuICAgICAgICAvLyBGZXRjaCB0aGUgd2VicGFnZSBjb250ZW50XHJcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCk7XHJcblxyXG4gICAgICAgIC8vIExvYWQgdGhlIGZldGNoZWQgSFRNTCBjb250ZW50IGludG8gQ2hlZXJpb1xyXG4gICAgICAgIGNvbnN0ICQgPSBjaGVlcmlvLmxvYWQocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gU2VsZWN0IGFsbCA8YT4gdGFncyBhbmQgZXh0cmFjdCBocmVmIGF0dHJpYnV0ZXNcclxuICAgICAgICBjb25zdCBsaW5rcyA9ICQoJ2EnKTsgLy8gQWRqdXN0IHRoZSBzZWxlY3RvciBhcyBuZWVkZWRcclxuICAgICAgICBjb25zdCBocmVmczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAgICAgbGlua3MuZWFjaCgoXywgbGluaykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBocmVmID0gJChsaW5rKS5hdHRyKCdocmVmJyk7XHJcbiAgICAgICAgICAgIGlmIChocmVmKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaHJlZi5pbmNsdWRlcyhcImh0dHBzOi8vXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZnMucHVzaChocmVmKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZnMucHVzaChnZXRCYXNlVXJsKHVybCkgKyBocmVmKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gaHJlZnM7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBlcnJvci5wdXNoKHVybCk7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0QmFzZVVybCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlZFVybCA9IG5ldyBVUkwodXJsKTtcclxuICAgICAgICByZXR1cm4gYCR7cGFyc2VkVXJsLnByb3RvY29sfS8vJHtwYXJzZWRVcmwuaG9zdG5hbWV9YDtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBFeGFtcGxlIHVzYWdlXHJcbihhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB1cmwgPSAnaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbSc7XHJcbiAgICBjb25zdCBocmVmcyA9IGF3YWl0IHNjcmFwZUhyZWZBdHRyaWJ1dGVzRnJvbVdlYnNpdGUodXJsKTtcclxuXHJcbiAgICBocmVmcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgIGlmICh1cmwgIT09IGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgbGluZS5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGAke2xpbmUubGVuZ3RofWApO1xyXG5cclxuICAgIHdoaWxlIChsaW5lLmxlbmd0aCAhPT0gMCApIHtcclxuICAgICAgICAvLyBXYWl0IGZvciB0aGUgYXN5bmMgZnVuY3Rpb24gdG8gY29tcGxldGVcclxuICAgICAgICBjb25zdCBjdXJyZW50VXJsID0gbGluZS5zaGlmdCgpOyAvLyBHZXQgYW5kIHJlbW92ZSB0aGUgZmlyc3QgZWxlbWVudCBmcm9tIHRoZSBsaW5lIGFycmF5XHJcbiAgICAgICAgaWYgKCFjdXJyZW50VXJsKSBjb250aW51ZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoIXdhdGNoZWQuaW5jbHVkZXMoY3VycmVudFVybCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhyZWZzID0gYXdhaXQgc2NyYXBlSHJlZkF0dHJpYnV0ZXNGcm9tV2Vic2l0ZShjdXJyZW50VXJsKTtcclxuICAgICAgICAgICAgICAgIGhyZWZzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVybCAhPSBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghd2F0Y2hlZC5pbmNsdWRlcyhlbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBsaW5lLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAod2F0Y2hlZC5pbmNsdWRlcyhlbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLnNwbGljZShsaW5lLmluZGV4T2YoZWxlbWVudCksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgd2F0Y2hlZC5wdXNoKGN1cnJlbnRVcmwpO1xyXG4gICAgICAgICAgICAgICAgYXBwZW5kRmlsZShcImxvZzEudHh0XCIsIGAke2xpbmUubGVuZ3RofSBpbiBxdWV1ZTsgJHt3YXRjaGVkLmxlbmd0aH0gd2F0Y2hlZDsgJHtyZW1vdmVkLmxlbmd0aH0gcmVtb3ZlZDsgJHtyZW1vdmVkLmxlbmd0aCArIHdhdGNoZWQubGVuZ3RofSBwcm9jZXNzZWQ7ICR7ZXJyb3IubGVuZ3RofSB3aXRoIGVycm9yczsgQmFzZTogJHtnZXRCYXNlVXJsKGN1cnJlbnRVcmwpfTogR290OiAke2N1cnJlbnRVcmx9IFxcbmAsIGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXBwZW5kIGZhaWxlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9uZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtsaW5lLmxlbmd0aH0gcXVldWU7ICR7d2F0Y2hlZC5sZW5ndGh9IHdhdGNoZWQ7ICR7cmVtb3ZlZC5sZW5ndGh9IHJlbW92ZWQ7ICR7cmVtb3ZlZC5sZW5ndGggKyB3YXRjaGVkLmxlbmd0aH0gcHJvY2Vzc2VkOyAke2Vycm9yLmxlbmd0aH0gd2l0aCBlcnJvcnM7IEJhc2U6ICR7Z2V0QmFzZVVybChjdXJyZW50VXJsKX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaChjdXJyZW50VXJsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBlcnJvci5wdXNoKGN1cnJlbnRVcmwpXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTtcclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLE9BQU8sV0FBVztBQUNsQixZQUFZLGFBQWE7QUFDekIsU0FBUyxrQkFBa0I7QUFHM0IsSUFBSSxPQUFpQixDQUFDO0FBQ3RCLElBQUksVUFBb0IsQ0FBQztBQUN6QixJQUFJLFVBQW9CLENBQUM7QUFDekIsSUFBSSxRQUFrQixDQUFDO0FBR3ZCLGVBQWUsZ0NBQWdDLEtBQWdDO0FBQzNFLE1BQUk7QUFHQSxRQUFJLFdBQVcsTUFBTSxNQUFNLElBQUksR0FBRztBQUdsQyxVQUFNLElBQVksYUFBSyxTQUFTLElBQUk7QUFHcEMsVUFBTSxRQUFRLEVBQUUsR0FBRztBQUNuQixVQUFNLFFBQWtCLENBQUM7QUFFekIsVUFBTSxLQUFLLENBQUMsR0FBRyxTQUFTO0FBQ3BCLFlBQU0sT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLE1BQU07QUFDaEMsVUFBSSxNQUFNO0FBQ04sWUFBSSxLQUFLLFNBQVMsVUFBVSxHQUFHO0FBQzNCLGdCQUFNLEtBQUssSUFBSTtBQUFBLFFBQ25CLE9BQU87QUFDSCxnQkFBTSxLQUFLLFdBQVcsR0FBRyxJQUFJLElBQUk7QUFBQSxRQUNyQztBQUFBLE1BQ0o7QUFBQSxJQUNKLENBQUM7QUFFRCxXQUFPO0FBQUEsRUFDWCxTQUFTLEtBQVA7QUFDRSxVQUFNLEtBQUssR0FBRztBQUNkLFdBQU8sQ0FBQztBQUFBLEVBQ1o7QUFDSjtBQUdBLFNBQVMsV0FBVyxLQUFxQjtBQUNyQyxNQUFJO0FBQ0EsVUFBTSxZQUFZLElBQUksSUFBSSxHQUFHO0FBQzdCLFdBQU8sR0FBRyxVQUFVLGFBQWEsVUFBVTtBQUFBLEVBQy9DLFNBQVNBLFFBQVA7QUFDRSxXQUFPO0FBQUEsRUFDWDtBQUNKO0FBQUEsQ0FHQyxZQUFZO0FBQ1QsUUFBTSxNQUFNO0FBQ1osUUFBTSxRQUFRLE1BQU0sZ0NBQWdDLEdBQUc7QUFFdkQsUUFBTSxRQUFRLGFBQVc7QUFDckIsUUFBSSxRQUFRLFNBQVM7QUFDakIsV0FBSyxLQUFLLE9BQU87QUFBQSxJQUNyQjtBQUFBLEVBQ0osQ0FBQztBQUVELFVBQVEsSUFBSSxHQUFHLEtBQUssUUFBUTtBQUU1QixTQUFPLEtBQUssV0FBVyxHQUFJO0FBRXZCLFVBQU0sYUFBYSxLQUFLLE1BQU07QUFDOUIsUUFBSSxDQUFDO0FBQVk7QUFDakIsUUFBSTtBQUNBLFVBQUksQ0FBQyxRQUFRLFNBQVMsVUFBVSxHQUFHO0FBQy9CLGNBQU1DLFNBQVEsTUFBTSxnQ0FBZ0MsVUFBVTtBQUM5RCxRQUFBQSxPQUFNLFFBQVEsYUFBVztBQUNyQixjQUFJLE9BQU8sU0FBUztBQUNoQixnQkFBSSxDQUFDLFFBQVEsU0FBUyxPQUFPLEdBQUc7QUFDNUIsbUJBQUssS0FBSyxPQUFPO0FBQUEsWUFDckIsT0FBTTtBQUNGLHNCQUFRLEtBQUssT0FBTztBQUFBLFlBQ3hCO0FBQUEsVUFDSjtBQUFBLFFBQ0osQ0FBQztBQUVELGFBQUssUUFBUSxDQUFDLFlBQVk7QUFDdEIsY0FBSSxRQUFRLFNBQVMsT0FBTyxHQUFHO0FBQzNCLGlCQUFLLE9BQU8sS0FBSyxRQUFRLE9BQU8sR0FBRyxDQUFDO0FBQ3BDLG9CQUFRLEtBQUssT0FBTztBQUFBLFVBQ3hCO0FBQUEsUUFDSixDQUFDO0FBR0QsZ0JBQVEsS0FBSyxVQUFVO0FBQ3ZCLG1CQUFXLFlBQVksR0FBRyxLQUFLLG9CQUFvQixRQUFRLG1CQUFtQixRQUFRLG1CQUFtQixRQUFRLFNBQVMsUUFBUSxxQkFBcUIsTUFBTSw2QkFBNkIsV0FBVyxVQUFVLFdBQVc7QUFBQSxHQUFpQixTQUFTLEtBQUs7QUFDclAsY0FBSSxLQUFLO0FBQUEsVUFFUCxPQUFPO0FBRUwsb0JBQVEsSUFBSSxHQUFHLEtBQUssaUJBQWlCLFFBQVEsbUJBQW1CLFFBQVEsbUJBQW1CLFFBQVEsU0FBUyxRQUFRLHFCQUFxQixNQUFNLDZCQUE2QixXQUFXLFVBQVUsR0FBRztBQUFBLFVBQ3RNO0FBQUEsUUFFTixDQUFDO0FBQUEsTUFFTCxPQUFNO0FBQ0YsZ0JBQVEsS0FBSyxVQUFVO0FBQUEsTUFDM0I7QUFBQSxJQUNKLFNBQVMsS0FBUDtBQUNFLFlBQU0sS0FBSyxVQUFVO0FBQ3JCO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFDSixHQUFHOyIsCiAgIm5hbWVzIjogWyJlcnJvciIsICJocmVmcyJdCn0K

	