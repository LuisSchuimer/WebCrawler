process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719570221858.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// getimg.ts
import * as fs from "fs";
import * as readline from "readline";
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
async function readLinesFromFile(filePath) {
  const fileStream = fs.createReadStream(filePath);
  const rl = readline.createInterface({
    input: fileStream,
    crlfDelay: Infinity
  });
  const lines = [];
  for await (const line of rl) {
    lines.push(line);
  }
  return lines;
}
function extractUrls(lines) {
  const urls = [];
  const urlPattern = /Got: (https?:\/\/[^\s]+)/;
  for (const line of lines) {
    const match = line.match(urlPattern);
    if (match && match[1]) {
      urls.push(match[1]);
    }
  }
  return urls;
}
async function fetchHtml(url) {
  const response = await axios.get(url);
  return response.data;
}
function extractImageUrls(html) {
  const $ = cheerio.load(html);
  const imageUrls = [];
  $("img").each((_, img) => {
    const src = $(img).attr("src");
    if (src) {
      imageUrls.push(src);
    }
  });
  return imageUrls;
}
async function main() {
  const filePath = "log.txt";
  const lines = await readLinesFromFile(filePath);
  const urls = extractUrls(lines);
  for (const url of urls) {
    try {
      console.log(`Fetching images from: ${url}`);
      const html = await fetchHtml(url);
      const imageUrls = extractImageUrls(html);
      console.log(`Found ${imageUrls.length} images:`);
      imageUrls.forEach((imageUrl) => console.log(imageUrl));
    } catch (error) {
      console.error(`Failed to fetch or process ${url}:`, error.message);
    }
  }
}
main().catch((error) => console.error("Error in main function:", error));
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiZ2V0aW1nLnRzIl0sCiAgInNvdXJjZVJvb3QiOiAiQzpcXFVzZXJzXFxwMDFcXEdJVEhVQlxcVHlwZVNjcmlwdDIiLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xyXG5pbXBvcnQgKiBhcyByZWFkbGluZSBmcm9tICdyZWFkbGluZSc7XHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCAqIGFzIGNoZWVyaW8gZnJvbSAnY2hlZXJpbyc7XHJcblxyXG4vLyBSZWFkIHRoZSB0ZXh0IGZpbGUgbGluZSBieSBsaW5lXHJcbmFzeW5jIGZ1bmN0aW9uIHJlYWRMaW5lc0Zyb21GaWxlKGZpbGVQYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XHJcbiAgICBjb25zdCBmaWxlU3RyZWFtID0gZnMuY3JlYXRlUmVhZFN0cmVhbShmaWxlUGF0aCk7XHJcbiAgICBjb25zdCBybCA9IHJlYWRsaW5lLmNyZWF0ZUludGVyZmFjZSh7XHJcbiAgICAgICAgaW5wdXQ6IGZpbGVTdHJlYW0sXHJcbiAgICAgICAgY3JsZkRlbGF5OiBJbmZpbml0eSxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGxpbmVzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgZm9yIGF3YWl0IChjb25zdCBsaW5lIG9mIHJsKSB7XHJcbiAgICAgICAgbGluZXMucHVzaChsaW5lKTtcclxuICAgIH1cclxuICAgIHJldHVybiBsaW5lcztcclxufVxyXG5cclxuLy8gRXh0cmFjdCBVUkxzIGZyb20gZWFjaCBsaW5lXHJcbmZ1bmN0aW9uIGV4dHJhY3RVcmxzKGxpbmVzOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IHVybHM6IHN0cmluZ1tdID0gW107XHJcbiAgICBjb25zdCB1cmxQYXR0ZXJuID0gL0dvdDogKGh0dHBzPzpcXC9cXC9bXlxcc10rKS87XHJcbiAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcclxuICAgICAgICBjb25zdCBtYXRjaCA9IGxpbmUubWF0Y2godXJsUGF0dGVybik7XHJcbiAgICAgICAgaWYgKG1hdGNoICYmIG1hdGNoWzFdKSB7XHJcbiAgICAgICAgICAgIHVybHMucHVzaChtYXRjaFsxXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVybHM7XHJcbn1cclxuXHJcbi8vIEZldGNoIEhUTUwgY29udGVudCBmcm9tIGEgVVJMXHJcbmFzeW5jIGZ1bmN0aW9uIGZldGNoSHRtbCh1cmw6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwpO1xyXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XHJcbn1cclxuXHJcbi8vIEV4dHJhY3QgaW1hZ2UgVVJMcyBmcm9tIEhUTUwgY29udGVudFxyXG5mdW5jdGlvbiBleHRyYWN0SW1hZ2VVcmxzKGh0bWw6IHN0cmluZyk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0ICQgPSBjaGVlcmlvLmxvYWQoaHRtbCk7XHJcbiAgICBjb25zdCBpbWFnZVVybHM6IHN0cmluZ1tdID0gW107XHJcbiAgICAkKCdpbWcnKS5lYWNoKChfLCBpbWcpID0+IHtcclxuICAgICAgICBjb25zdCBzcmMgPSAkKGltZykuYXR0cignc3JjJyk7XHJcbiAgICAgICAgaWYgKHNyYykge1xyXG4gICAgICAgICAgICBpbWFnZVVybHMucHVzaChzcmMpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGltYWdlVXJscztcclxufVxyXG5cclxuLy8gTWFpbiBmdW5jdGlvblxyXG5hc3luYyBmdW5jdGlvbiBtYWluKCkge1xyXG4gICAgY29uc3QgZmlsZVBhdGggPSAnbG9nLnR4dCc7IC8vIFBhdGggdG8geW91ciB0ZXh0IGZpbGVcclxuICAgIGNvbnN0IGxpbmVzID0gYXdhaXQgcmVhZExpbmVzRnJvbUZpbGUoZmlsZVBhdGgpO1xyXG4gICAgY29uc3QgdXJscyA9IGV4dHJhY3RVcmxzKGxpbmVzKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHVybCBvZiB1cmxzKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYEZldGNoaW5nIGltYWdlcyBmcm9tOiAke3VybH1gKTtcclxuICAgICAgICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IGZldGNoSHRtbCh1cmwpO1xyXG4gICAgICAgICAgICBjb25zdCBpbWFnZVVybHMgPSBleHRyYWN0SW1hZ2VVcmxzKGh0bWwpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgRm91bmQgJHtpbWFnZVVybHMubGVuZ3RofSBpbWFnZXM6YCk7XHJcbiAgICAgICAgICAgIGltYWdlVXJscy5mb3JFYWNoKGltYWdlVXJsID0+IGNvbnNvbGUubG9nKGltYWdlVXJsKSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGZldGNoIG9yIHByb2Nlc3MgJHt1cmx9OmAsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxubWFpbigpLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIG1haW4gZnVuY3Rpb246JywgZXJyb3IpKTtcclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFlBQVksUUFBUTtBQUNwQixZQUFZLGNBQWM7QUFDMUIsT0FBTyxXQUFXO0FBQ2xCLFlBQVksYUFBYTtBQUd6QixlQUFlLGtCQUFrQixVQUFxQztBQUNsRSxRQUFNLGFBQWdCLG9CQUFpQixRQUFRO0FBQy9DLFFBQU0sS0FBYyx5QkFBZ0I7QUFBQSxJQUNoQyxPQUFPO0FBQUEsSUFDUCxXQUFXO0FBQUEsRUFDZixDQUFDO0FBRUQsUUFBTSxRQUFrQixDQUFDO0FBQ3pCLG1CQUFpQixRQUFRLElBQUk7QUFDekIsVUFBTSxLQUFLLElBQUk7QUFBQSxFQUNuQjtBQUNBLFNBQU87QUFDWDtBQUdBLFNBQVMsWUFBWSxPQUEyQjtBQUM1QyxRQUFNLE9BQWlCLENBQUM7QUFDeEIsUUFBTSxhQUFhO0FBQ25CLGFBQVcsUUFBUSxPQUFPO0FBQ3RCLFVBQU0sUUFBUSxLQUFLLE1BQU0sVUFBVTtBQUNuQyxRQUFJLFNBQVMsTUFBTSxDQUFDLEdBQUc7QUFDbkIsV0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDO0FBQUEsSUFDdEI7QUFBQSxFQUNKO0FBQ0EsU0FBTztBQUNYO0FBR0EsZUFBZSxVQUFVLEtBQThCO0FBQ25ELFFBQU0sV0FBVyxNQUFNLE1BQU0sSUFBSSxHQUFHO0FBQ3BDLFNBQU8sU0FBUztBQUNwQjtBQUdBLFNBQVMsaUJBQWlCLE1BQXdCO0FBQzlDLFFBQU0sSUFBWSxhQUFLLElBQUk7QUFDM0IsUUFBTSxZQUFzQixDQUFDO0FBQzdCLElBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxHQUFHLFFBQVE7QUFDdEIsVUFBTSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssS0FBSztBQUM3QixRQUFJLEtBQUs7QUFDTCxnQkFBVSxLQUFLLEdBQUc7QUFBQSxJQUN0QjtBQUFBLEVBQ0osQ0FBQztBQUNELFNBQU87QUFDWDtBQUdBLGVBQWUsT0FBTztBQUNsQixRQUFNLFdBQVc7QUFDakIsUUFBTSxRQUFRLE1BQU0sa0JBQWtCLFFBQVE7QUFDOUMsUUFBTSxPQUFPLFlBQVksS0FBSztBQUU5QixhQUFXLE9BQU8sTUFBTTtBQUNwQixRQUFJO0FBQ0EsY0FBUSxJQUFJLHlCQUF5QixLQUFLO0FBQzFDLFlBQU0sT0FBTyxNQUFNLFVBQVUsR0FBRztBQUNoQyxZQUFNLFlBQVksaUJBQWlCLElBQUk7QUFDdkMsY0FBUSxJQUFJLFNBQVMsVUFBVSxnQkFBZ0I7QUFDL0MsZ0JBQVUsUUFBUSxjQUFZLFFBQVEsSUFBSSxRQUFRLENBQUM7QUFBQSxJQUN2RCxTQUFTLE9BQVA7QUFDRSxjQUFRLE1BQU0sOEJBQThCLFFBQVEsTUFBTSxPQUFPO0FBQUEsSUFDckU7QUFBQSxFQUNKO0FBQ0o7QUFFQSxLQUFLLEVBQUUsTUFBTSxXQUFTLFFBQVEsTUFBTSwyQkFBMkIsS0FBSyxDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=

	