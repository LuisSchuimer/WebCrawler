process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719411136566.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// main.ts
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
import { appendFile } from "fs";
var line = [];
var watched = [];
async function scrapeHrefAttributesFromWebsite(url) {
  try {
    const response = await axios.get(url);
    const $ = cheerio.load(response.data);
    const links = $("a");
    const hrefs = [];
    links.each((_, link) => {
      const href = $(link).attr("href");
      if (href) {
        if (href.includes("https://")) {
          hrefs.push(href);
        } else {
          hrefs.push(url + href);
        }
      }
    });
    return hrefs;
  } catch (error) {
    return [];
  }
}
(async () => {
  const url = "https://de.wikipedia.org";
  const hrefs = await scrapeHrefAttributesFromWebsite(url);
  hrefs.forEach((element) => {
    if (url !== element) {
      line.push(element);
    }
  });
  console.log(`${line.length}`);
  while (line.length !== 0) {
    const currentUrl = line.shift();
    if (!currentUrl)
      continue;
    try {
      if (!watched.includes(currentUrl)) {
        const hrefs2 = await scrapeHrefAttributesFromWebsite(currentUrl);
        hrefs2.forEach((element) => {
          if (url !== element) {
            line.push(element);
          }
        });
        watched.push(currentUrl);
        appendFile("log.txt", `${line.length} left; ${watched.length} watched: Got: ${currentUrl} 
`, function(err) {
          if (err) {
          } else {
            console.log(`${line.length} left; ${watched.length} watched: Got: ${currentUrl}`);
          }
        });
      }
    } catch (error) {
      continue;
    }
  }
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VSb290IjogIkM6XFxVc2Vyc1xccDAxXFxHSVRIVUJcXFR5cGVTY3JpcHQyIiwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0ICogYXMgY2hlZXJpbyBmcm9tIFwiY2hlZXJpb1wiO1xyXG5pbXBvcnQgeyBhcHBlbmRGaWxlIH0gZnJvbSBcImZzXCI7XHJcblxyXG5sZXQgbGluZTogc3RyaW5nW10gPSBbXTtcclxubGV0IHdhdGNoZWQ6IHN0cmluZ1tdID0gW107XHJcblxyXG5hc3luYyBmdW5jdGlvbiBzY3JhcGVIcmVmQXR0cmlidXRlc0Zyb21XZWJzaXRlKHVybDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBGZXRjaCB0aGUgd2VicGFnZSBjb250ZW50XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBMb2FkIHRoZSBmZXRjaGVkIEhUTUwgY29udGVudCBpbnRvIENoZWVyaW9cclxuICAgICAgICBjb25zdCAkID0gY2hlZXJpby5sb2FkKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFNlbGVjdCBhbGwgPGE+IHRhZ3MgYW5kIGV4dHJhY3QgaHJlZiBhdHRyaWJ1dGVzXHJcbiAgICAgICAgY29uc3QgbGlua3MgPSAkKCdhJyk7IC8vIEFkanVzdCB0aGUgc2VsZWN0b3IgYXMgbmVlZGVkXHJcbiAgICAgICAgY29uc3QgaHJlZnM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgICAgIGxpbmtzLmVhY2goKF8sIGxpbmspID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaHJlZiA9ICQobGluaykuYXR0cignaHJlZicpO1xyXG4gICAgICAgICAgICBpZiAoaHJlZikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGhyZWYuaW5jbHVkZXMoXCJodHRwczovL1wiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhyZWZzLnB1c2goaHJlZik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGhyZWZzLnB1c2godXJsICsgaHJlZik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGhyZWZzO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEV4YW1wbGUgdXNhZ2VcclxuKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHVybCA9ICdodHRwczovL2RlLndpa2lwZWRpYS5vcmcnO1xyXG4gICAgY29uc3QgaHJlZnMgPSBhd2FpdCBzY3JhcGVIcmVmQXR0cmlidXRlc0Zyb21XZWJzaXRlKHVybCk7XHJcblxyXG4gICAgaHJlZnMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICBpZiAodXJsICE9PSBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGxpbmUucHVzaChlbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhgJHtsaW5lLmxlbmd0aH1gKTtcclxuXHJcbiAgICB3aGlsZSAobGluZS5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAvLyBXYWl0IGZvciB0aGUgYXN5bmMgZnVuY3Rpb24gdG8gY29tcGxldGVcclxuICAgICAgICBjb25zdCBjdXJyZW50VXJsID0gbGluZS5zaGlmdCgpOyAvLyBHZXQgYW5kIHJlbW92ZSB0aGUgZmlyc3QgZWxlbWVudCBmcm9tIHRoZSBsaW5lIGFycmF5XHJcbiAgICAgICAgaWYgKCFjdXJyZW50VXJsKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKCF3YXRjaGVkLmluY2x1ZGVzKGN1cnJlbnRVcmwpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBocmVmcyA9IGF3YWl0IHNjcmFwZUhyZWZBdHRyaWJ1dGVzRnJvbVdlYnNpdGUoY3VycmVudFVybCk7XHJcbiAgICAgICAgICAgICAgICBocmVmcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cmwgIT09IGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHdhdGNoZWQucHVzaChjdXJyZW50VXJsKTtcclxuICAgICAgICAgICAgICAgIGFwcGVuZEZpbGUoXCJsb2cudHh0XCIsIGAke2xpbmUubGVuZ3RofSBsZWZ0OyAke3dhdGNoZWQubGVuZ3RofSB3YXRjaGVkOiBHb3Q6ICR7Y3VycmVudFVybH0gXFxuYCwgZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhcHBlbmQgZmFpbGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkb25lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2xpbmUubGVuZ3RofSBsZWZ0OyAke3dhdGNoZWQubGVuZ3RofSB3YXRjaGVkOiBHb3Q6ICR7Y3VycmVudFVybH1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTtcclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLE9BQU8sV0FBVztBQUNsQixZQUFZLGFBQWE7QUFDekIsU0FBUyxrQkFBa0I7QUFFM0IsSUFBSSxPQUFpQixDQUFDO0FBQ3RCLElBQUksVUFBb0IsQ0FBQztBQUV6QixlQUFlLGdDQUFnQyxLQUFnQztBQUMzRSxNQUFJO0FBRUEsVUFBTSxXQUFXLE1BQU0sTUFBTSxJQUFJLEdBQUc7QUFHcEMsVUFBTSxJQUFZLGFBQUssU0FBUyxJQUFJO0FBR3BDLFVBQU0sUUFBUSxFQUFFLEdBQUc7QUFDbkIsVUFBTSxRQUFrQixDQUFDO0FBRXpCLFVBQU0sS0FBSyxDQUFDLEdBQUcsU0FBUztBQUNwQixZQUFNLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxNQUFNO0FBQ2hDLFVBQUksTUFBTTtBQUNOLFlBQUksS0FBSyxTQUFTLFVBQVUsR0FBRztBQUMzQixnQkFBTSxLQUFLLElBQUk7QUFBQSxRQUNuQixPQUFPO0FBQ0gsZ0JBQU0sS0FBSyxNQUFNLElBQUk7QUFBQSxRQUN6QjtBQUFBLE1BQ0o7QUFBQSxJQUNKLENBQUM7QUFFRCxXQUFPO0FBQUEsRUFDWCxTQUFTLE9BQVA7QUFDRSxXQUFPLENBQUM7QUFBQSxFQUNaO0FBQ0o7QUFBQSxDQUdDLFlBQVk7QUFDVCxRQUFNLE1BQU07QUFDWixRQUFNLFFBQVEsTUFBTSxnQ0FBZ0MsR0FBRztBQUV2RCxRQUFNLFFBQVEsYUFBVztBQUNyQixRQUFJLFFBQVEsU0FBUztBQUNqQixXQUFLLEtBQUssT0FBTztBQUFBLElBQ3JCO0FBQUEsRUFDSixDQUFDO0FBRUQsVUFBUSxJQUFJLEdBQUcsS0FBSyxRQUFRO0FBRTVCLFNBQU8sS0FBSyxXQUFXLEdBQUc7QUFFdEIsVUFBTSxhQUFhLEtBQUssTUFBTTtBQUM5QixRQUFJLENBQUM7QUFBWTtBQUVqQixRQUFJO0FBQ0EsVUFBSSxDQUFDLFFBQVEsU0FBUyxVQUFVLEdBQUc7QUFDL0IsY0FBTUEsU0FBUSxNQUFNLGdDQUFnQyxVQUFVO0FBQzlELFFBQUFBLE9BQU0sUUFBUSxhQUFXO0FBQ3JCLGNBQUksUUFBUSxTQUFTO0FBQ2pCLGlCQUFLLEtBQUssT0FBTztBQUFBLFVBQ3JCO0FBQUEsUUFDSixDQUFDO0FBR0QsZ0JBQVEsS0FBSyxVQUFVO0FBQ3ZCLG1CQUFXLFdBQVcsR0FBRyxLQUFLLGdCQUFnQixRQUFRLHdCQUF3QjtBQUFBLEdBQWlCLFNBQVMsS0FBSztBQUN6RyxjQUFJLEtBQUs7QUFBQSxVQUVQLE9BQU87QUFFTCxvQkFBUSxJQUFJLEdBQUcsS0FBSyxnQkFBZ0IsUUFBUSx3QkFBd0IsWUFBWTtBQUFBLFVBQ2xGO0FBQUEsUUFFTixDQUFDO0FBQUEsTUFDTDtBQUFBLElBQ0osU0FBUyxPQUFQO0FBQ0U7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUNKLEdBQUc7IiwKICAibmFtZXMiOiBbImhyZWZzIl0KfQo=

	