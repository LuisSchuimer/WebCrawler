process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719410236032.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// main.ts
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
var line = [];
var watched = [];
async function scrapeHrefAttributesFromWebsite(url) {
  try {
    const response = await axios.get(url);
    const $ = cheerio.load(response.data);
    const links = $("a");
    const hrefs = [];
    links.each((_, link) => {
      const href = $(link).attr("href");
      if (href) {
        if (href.includes("https://")) {
          hrefs.push(href);
        } else {
          hrefs.push(url + href);
        }
      }
    });
    return hrefs;
  } catch (error) {
    console.log(`Error fetching or processing ${url}: `);
    return [];
  }
}
(async () => {
  const url = "https://www.w3schools.com";
  const hrefs = await scrapeHrefAttributesFromWebsite(url);
  hrefs.forEach((element) => {
    if (url !== element) {
      line.push(element);
    }
  });
  console.log(`${line.length}`);
  while (line.length !== 0) {
    const currentUrl = line.shift();
    if (!currentUrl)
      continue;
    try {
      if (!watched.includes(currentUrl)) {
        const hrefs2 = await scrapeHrefAttributesFromWebsite(currentUrl);
        hrefs2.forEach((element) => {
          if (url !== element) {
            line.push(element);
          }
        });
        line.forEach((element) => {
          if (watched.includes(element)) {
            line.pop[line.indexOf(element)];
            console.log(`Already Watched: ${element}`);
          }
        });
        console.log(`Got: ${currentUrl}: ${line.length} left; ${watched.length} watched`);
        watched.push(currentUrl);
      }
    } catch (error) {
      console.log(`Error processing ${currentUrl}`);
    }
  }
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VSb290IjogIkM6XFxVc2Vyc1xccDAxXFxHSVRIVUJcXFR5cGVTY3JpcHQyIiwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0ICogYXMgY2hlZXJpbyBmcm9tIFwiY2hlZXJpb1wiO1xyXG5cclxubGV0IGxpbmU6IHN0cmluZ1tdID0gW107XHJcbmxldCB3YXRjaGVkOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gc2NyYXBlSHJlZkF0dHJpYnV0ZXNGcm9tV2Vic2l0ZSh1cmw6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy8gRmV0Y2ggdGhlIHdlYnBhZ2UgY29udGVudFxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gTG9hZCB0aGUgZmV0Y2hlZCBIVE1MIGNvbnRlbnQgaW50byBDaGVlcmlvXHJcbiAgICAgICAgY29uc3QgJCA9IGNoZWVyaW8ubG9hZChyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBTZWxlY3QgYWxsIDxhPiB0YWdzIGFuZCBleHRyYWN0IGhyZWYgYXR0cmlidXRlc1xyXG4gICAgICAgIGNvbnN0IGxpbmtzID0gJCgnYScpOyAvLyBBZGp1c3QgdGhlIHNlbGVjdG9yIGFzIG5lZWRlZFxyXG4gICAgICAgIGNvbnN0IGhyZWZzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICBsaW5rcy5lYWNoKChfLCBsaW5rKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhyZWYgPSAkKGxpbmspLmF0dHIoJ2hyZWYnKTtcclxuICAgICAgICAgICAgaWYgKGhyZWYpIHtcclxuICAgICAgICAgICAgICAgIGlmIChocmVmLmluY2x1ZGVzKFwiaHR0cHM6Ly9cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBocmVmcy5wdXNoKGhyZWYpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBocmVmcy5wdXNoKHVybCArIGhyZWYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBocmVmcztcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGZldGNoaW5nIG9yIHByb2Nlc3NpbmcgJHt1cmx9OiBgKTtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEV4YW1wbGUgdXNhZ2VcclxuKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHVybCA9ICdodHRwczovL3d3dy53M3NjaG9vbHMuY29tJztcclxuICAgIGNvbnN0IGhyZWZzID0gYXdhaXQgc2NyYXBlSHJlZkF0dHJpYnV0ZXNGcm9tV2Vic2l0ZSh1cmwpO1xyXG5cclxuICAgIGhyZWZzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgaWYgKHVybCAhPT0gZWxlbWVudCkge1xyXG4gICAgICAgICAgICBsaW5lLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc29sZS5sb2coYCR7bGluZS5sZW5ndGh9YCk7XHJcblxyXG4gICAgd2hpbGUgKGxpbmUubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGFzeW5jIGZ1bmN0aW9uIHRvIGNvbXBsZXRlXHJcbiAgICAgICAgY29uc3QgY3VycmVudFVybCA9IGxpbmUuc2hpZnQoKTsgLy8gR2V0IGFuZCByZW1vdmUgdGhlIGZpcnN0IGVsZW1lbnQgZnJvbSB0aGUgbGluZSBhcnJheVxyXG4gICAgICAgIGlmICghY3VycmVudFVybCkgY29udGludWU7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghd2F0Y2hlZC5pbmNsdWRlcyhjdXJyZW50VXJsKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaHJlZnMgPSBhd2FpdCBzY3JhcGVIcmVmQXR0cmlidXRlc0Zyb21XZWJzaXRlKGN1cnJlbnRVcmwpO1xyXG4gICAgICAgICAgICAgICAgaHJlZnMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXJsICE9PSBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBsaW5lLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAod2F0Y2hlZC5pbmNsdWRlcyhlbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLnBvcFtsaW5lLmluZGV4T2YoZWxlbWVudCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQWxyZWFkeSBXYXRjaGVkOiAke2VsZW1lbnR9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBHb3Q6ICR7Y3VycmVudFVybH06ICR7bGluZS5sZW5ndGh9IGxlZnQ7ICR7d2F0Y2hlZC5sZW5ndGh9IHdhdGNoZWRgKTtcclxuICAgICAgICAgICAgICAgIHdhdGNoZWQucHVzaChjdXJyZW50VXJsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFcnJvciBwcm9jZXNzaW5nICR7Y3VycmVudFVybH1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxPQUFPLFdBQVc7QUFDbEIsWUFBWSxhQUFhO0FBRXpCLElBQUksT0FBaUIsQ0FBQztBQUN0QixJQUFJLFVBQW9CLENBQUM7QUFFekIsZUFBZSxnQ0FBZ0MsS0FBZ0M7QUFDM0UsTUFBSTtBQUVBLFVBQU0sV0FBVyxNQUFNLE1BQU0sSUFBSSxHQUFHO0FBR3BDLFVBQU0sSUFBWSxhQUFLLFNBQVMsSUFBSTtBQUdwQyxVQUFNLFFBQVEsRUFBRSxHQUFHO0FBQ25CLFVBQU0sUUFBa0IsQ0FBQztBQUV6QixVQUFNLEtBQUssQ0FBQyxHQUFHLFNBQVM7QUFDcEIsWUFBTSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssTUFBTTtBQUNoQyxVQUFJLE1BQU07QUFDTixZQUFJLEtBQUssU0FBUyxVQUFVLEdBQUc7QUFDM0IsZ0JBQU0sS0FBSyxJQUFJO0FBQUEsUUFDbkIsT0FBTztBQUNILGdCQUFNLEtBQUssTUFBTSxJQUFJO0FBQUEsUUFDekI7QUFBQSxNQUNKO0FBQUEsSUFDSixDQUFDO0FBRUQsV0FBTztBQUFBLEVBQ1gsU0FBUyxPQUFQO0FBQ0UsWUFBUSxJQUFJLGdDQUFnQyxPQUFPO0FBQ25ELFdBQU8sQ0FBQztBQUFBLEVBQ1o7QUFDSjtBQUFBLENBR0MsWUFBWTtBQUNULFFBQU0sTUFBTTtBQUNaLFFBQU0sUUFBUSxNQUFNLGdDQUFnQyxHQUFHO0FBRXZELFFBQU0sUUFBUSxhQUFXO0FBQ3JCLFFBQUksUUFBUSxTQUFTO0FBQ2pCLFdBQUssS0FBSyxPQUFPO0FBQUEsSUFDckI7QUFBQSxFQUNKLENBQUM7QUFFRCxVQUFRLElBQUksR0FBRyxLQUFLLFFBQVE7QUFFNUIsU0FBTyxLQUFLLFdBQVcsR0FBRztBQUV0QixVQUFNLGFBQWEsS0FBSyxNQUFNO0FBQzlCLFFBQUksQ0FBQztBQUFZO0FBRWpCLFFBQUk7QUFDQSxVQUFJLENBQUMsUUFBUSxTQUFTLFVBQVUsR0FBRztBQUMvQixjQUFNQSxTQUFRLE1BQU0sZ0NBQWdDLFVBQVU7QUFDOUQsUUFBQUEsT0FBTSxRQUFRLGFBQVc7QUFDckIsY0FBSSxRQUFRLFNBQVM7QUFDakIsaUJBQUssS0FBSyxPQUFPO0FBQUEsVUFDckI7QUFBQSxRQUNKLENBQUM7QUFFRCxhQUFLLFFBQVEsQ0FBQyxZQUFZO0FBQ3RCLGNBQUksUUFBUSxTQUFTLE9BQU8sR0FBRztBQUMzQixpQkFBSyxJQUFJLEtBQUssUUFBUSxPQUFPLENBQUM7QUFDOUIsb0JBQVEsSUFBSSxvQkFBb0IsU0FBUztBQUFBLFVBQzdDO0FBQUEsUUFDSixDQUFDO0FBRUQsZ0JBQVEsSUFBSSxRQUFRLGVBQWUsS0FBSyxnQkFBZ0IsUUFBUSxnQkFBZ0I7QUFDaEYsZ0JBQVEsS0FBSyxVQUFVO0FBQUEsTUFDM0I7QUFBQSxJQUNKLFNBQVMsT0FBUDtBQUNFLGNBQVEsSUFBSSxvQkFBb0IsWUFBWTtBQUFBLElBQ2hEO0FBQUEsRUFDSjtBQUNKLEdBQUc7IiwKICAibmFtZXMiOiBbImhyZWZzIl0KfQo=

	