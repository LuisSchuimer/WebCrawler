process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719488216876.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// main.ts
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
import { appendFile } from "fs";
var line = [];
var watched = [];
var removed = [];
var error = [];
async function scrapeHrefAttributesFromWebsite(url) {
  try {
    let response = await axios.get(url);
    const $ = cheerio.load(response.data);
    const links = $("a");
    const hrefs = [];
    links.each((_, link) => {
      const href = $(link).attr("href");
      if (href) {
        if (href.includes("https://")) {
          hrefs.push(href);
        } else {
          hrefs.push(getBaseUrl(url) + href);
        }
      }
    });
    return hrefs;
  } catch (err) {
    error.push(url);
    return [];
  }
}
function getBaseUrl(url) {
  try {
    const parsedUrl = new URL(url);
    return `${parsedUrl.protocol}//${parsedUrl.hostname}`;
  } catch (error2) {
    return "";
  }
}
(async () => {
  const url = "https://apple.com";
  const hrefs = await scrapeHrefAttributesFromWebsite(url);
  hrefs.forEach((element) => {
    if (url !== element) {
      line.push(element);
    }
  });
  console.log(`${line.length}`);
  while (line.length !== 0) {
    const currentUrl = line.shift();
    if (!currentUrl)
      continue;
    try {
      if (!watched.includes(currentUrl)) {
        const hrefs2 = await scrapeHrefAttributesFromWebsite(currentUrl);
        hrefs2.forEach((element) => {
          if (url != element) {
            if (!watched.includes(element)) {
              line.push(element);
            } else {
              removed.push(element);
            }
          }
        });
        line.forEach((element) => {
          if (watched.includes(element)) {
            line.splice(line.indexOf(element), 1);
            removed.push(element);
          }
        });
        watched.push(currentUrl);
        appendFile("log.txt", `${line.length} in queue; ${watched.length} watched; ${removed.length} removed; ${removed.length + watched.length} processed; Not found: ${error.length}; Base: ${getBaseUrl(currentUrl)}: Got: ${currentUrl} 
`, function(err) {
          if (err) {
          } else {
            console.log(`${line.length} in queue; ${watched.length} watched; ${removed.length} removed; ${removed.length + watched.length} processed; Not found: ${error.length}; Base: ${getBaseUrl(currentUrl)}`);
          }
        });
      } else {
        removed.push(currentUrl);
      }
    } catch (error2) {
      continue;
    }
  }
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VSb290IjogIkM6XFxVc2Vyc1xccDAxXFxHSVRIVUJcXFR5cGVTY3JpcHQyIiwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0ICogYXMgY2hlZXJpbyBmcm9tIFwiY2hlZXJpb1wiO1xyXG5pbXBvcnQgeyBhcHBlbmRGaWxlIH0gZnJvbSBcImZzXCI7XHJcblxyXG5cclxubGV0IGxpbmU6IHN0cmluZ1tdID0gW107XHJcbmxldCB3YXRjaGVkOiBzdHJpbmdbXSA9IFtdO1xyXG5sZXQgcmVtb3ZlZDogc3RyaW5nW10gPSBbXTtcclxubGV0IGVycm9yOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHNjcmFwZUhyZWZBdHRyaWJ1dGVzRnJvbVdlYnNpdGUodXJsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEZldGNoIHRoZSB3ZWJwYWdlIGNvbnRlbnRcclxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsKTtcclxuXHJcbiAgICAgICAgLy8gTG9hZCB0aGUgZmV0Y2hlZCBIVE1MIGNvbnRlbnQgaW50byBDaGVlcmlvXHJcbiAgICAgICAgY29uc3QgJCA9IGNoZWVyaW8ubG9hZChyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBTZWxlY3QgYWxsIDxhPiB0YWdzIGFuZCBleHRyYWN0IGhyZWYgYXR0cmlidXRlc1xyXG4gICAgICAgIGNvbnN0IGxpbmtzID0gJCgnYScpOyAvLyBBZGp1c3QgdGhlIHNlbGVjdG9yIGFzIG5lZWRlZFxyXG4gICAgICAgIGNvbnN0IGhyZWZzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICBsaW5rcy5lYWNoKChfLCBsaW5rKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhyZWYgPSAkKGxpbmspLmF0dHIoJ2hyZWYnKTtcclxuICAgICAgICAgICAgaWYgKGhyZWYpIHtcclxuICAgICAgICAgICAgICAgIGlmIChocmVmLmluY2x1ZGVzKFwiaHR0cHM6Ly9cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBocmVmcy5wdXNoKGhyZWYpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBocmVmcy5wdXNoKGdldEJhc2VVcmwodXJsKSArIGhyZWYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBocmVmcztcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGVycm9yLnB1c2godXJsKTtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBnZXRCYXNlVXJsKHVybDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xyXG4gICAgICAgIHJldHVybiBgJHtwYXJzZWRVcmwucHJvdG9jb2x9Ly8ke3BhcnNlZFVybC5ob3N0bmFtZX1gO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEV4YW1wbGUgdXNhZ2VcclxuKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHVybCA9ICdodHRwczovL2FwcGxlLmNvbSc7XHJcbiAgICBjb25zdCBocmVmcyA9IGF3YWl0IHNjcmFwZUhyZWZBdHRyaWJ1dGVzRnJvbVdlYnNpdGUodXJsKTtcclxuXHJcbiAgICBocmVmcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgIGlmICh1cmwgIT09IGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgbGluZS5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGAke2xpbmUubGVuZ3RofWApO1xyXG5cclxuICAgIHdoaWxlIChsaW5lLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgIC8vIFdhaXQgZm9yIHRoZSBhc3luYyBmdW5jdGlvbiB0byBjb21wbGV0ZVxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRVcmwgPSBsaW5lLnNoaWZ0KCk7IC8vIEdldCBhbmQgcmVtb3ZlIHRoZSBmaXJzdCBlbGVtZW50IGZyb20gdGhlIGxpbmUgYXJyYXlcclxuICAgICAgICBpZiAoIWN1cnJlbnRVcmwpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoIXdhdGNoZWQuaW5jbHVkZXMoY3VycmVudFVybCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhyZWZzID0gYXdhaXQgc2NyYXBlSHJlZkF0dHJpYnV0ZXNGcm9tV2Vic2l0ZShjdXJyZW50VXJsKTtcclxuICAgICAgICAgICAgICAgIGhyZWZzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVybCAhPSBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghd2F0Y2hlZC5pbmNsdWRlcyhlbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBsaW5lLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAod2F0Y2hlZC5pbmNsdWRlcyhlbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLnNwbGljZShsaW5lLmluZGV4T2YoZWxlbWVudCksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgd2F0Y2hlZC5wdXNoKGN1cnJlbnRVcmwpO1xyXG4gICAgICAgICAgICAgICAgYXBwZW5kRmlsZShcImxvZy50eHRcIiwgYCR7bGluZS5sZW5ndGh9IGluIHF1ZXVlOyAke3dhdGNoZWQubGVuZ3RofSB3YXRjaGVkOyAke3JlbW92ZWQubGVuZ3RofSByZW1vdmVkOyAke3JlbW92ZWQubGVuZ3RoICsgd2F0Y2hlZC5sZW5ndGh9IHByb2Nlc3NlZDsgTm90IGZvdW5kOiAke2Vycm9yLmxlbmd0aH07IEJhc2U6ICR7Z2V0QmFzZVVybChjdXJyZW50VXJsKX06IEdvdDogJHtjdXJyZW50VXJsfSBcXG5gLCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFwcGVuZCBmYWlsZWRcclxuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvbmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCR7bGluZS5sZW5ndGh9IGluIHF1ZXVlOyAke3dhdGNoZWQubGVuZ3RofSB3YXRjaGVkOyAke3JlbW92ZWQubGVuZ3RofSByZW1vdmVkOyAke3JlbW92ZWQubGVuZ3RoICsgd2F0Y2hlZC5sZW5ndGh9IHByb2Nlc3NlZDsgTm90IGZvdW5kOiAke2Vycm9yLmxlbmd0aH07IEJhc2U6ICR7Z2V0QmFzZVVybChjdXJyZW50VXJsKX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlZC5wdXNoKGN1cnJlbnRVcmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpO1xyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsT0FBTyxXQUFXO0FBQ2xCLFlBQVksYUFBYTtBQUN6QixTQUFTLGtCQUFrQjtBQUczQixJQUFJLE9BQWlCLENBQUM7QUFDdEIsSUFBSSxVQUFvQixDQUFDO0FBQ3pCLElBQUksVUFBb0IsQ0FBQztBQUN6QixJQUFJLFFBQWtCLENBQUM7QUFHdkIsZUFBZSxnQ0FBZ0MsS0FBZ0M7QUFDM0UsTUFBSTtBQUdBLFFBQUksV0FBVyxNQUFNLE1BQU0sSUFBSSxHQUFHO0FBR2xDLFVBQU0sSUFBWSxhQUFLLFNBQVMsSUFBSTtBQUdwQyxVQUFNLFFBQVEsRUFBRSxHQUFHO0FBQ25CLFVBQU0sUUFBa0IsQ0FBQztBQUV6QixVQUFNLEtBQUssQ0FBQyxHQUFHLFNBQVM7QUFDcEIsWUFBTSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssTUFBTTtBQUNoQyxVQUFJLE1BQU07QUFDTixZQUFJLEtBQUssU0FBUyxVQUFVLEdBQUc7QUFDM0IsZ0JBQU0sS0FBSyxJQUFJO0FBQUEsUUFDbkIsT0FBTztBQUNILGdCQUFNLEtBQUssV0FBVyxHQUFHLElBQUksSUFBSTtBQUFBLFFBQ3JDO0FBQUEsTUFDSjtBQUFBLElBQ0osQ0FBQztBQUVELFdBQU87QUFBQSxFQUNYLFNBQVMsS0FBUDtBQUNFLFVBQU0sS0FBSyxHQUFHO0FBQ2QsV0FBTyxDQUFDO0FBQUEsRUFDWjtBQUNKO0FBR0EsU0FBUyxXQUFXLEtBQXFCO0FBQ3JDLE1BQUk7QUFDQSxVQUFNLFlBQVksSUFBSSxJQUFJLEdBQUc7QUFDN0IsV0FBTyxHQUFHLFVBQVUsYUFBYSxVQUFVO0FBQUEsRUFDL0MsU0FBU0EsUUFBUDtBQUNFLFdBQU87QUFBQSxFQUNYO0FBQ0o7QUFBQSxDQUdDLFlBQVk7QUFDVCxRQUFNLE1BQU07QUFDWixRQUFNLFFBQVEsTUFBTSxnQ0FBZ0MsR0FBRztBQUV2RCxRQUFNLFFBQVEsYUFBVztBQUNyQixRQUFJLFFBQVEsU0FBUztBQUNqQixXQUFLLEtBQUssT0FBTztBQUFBLElBQ3JCO0FBQUEsRUFDSixDQUFDO0FBRUQsVUFBUSxJQUFJLEdBQUcsS0FBSyxRQUFRO0FBRTVCLFNBQU8sS0FBSyxXQUFXLEdBQUc7QUFFdEIsVUFBTSxhQUFhLEtBQUssTUFBTTtBQUM5QixRQUFJLENBQUM7QUFBWTtBQUVqQixRQUFJO0FBQ0EsVUFBSSxDQUFDLFFBQVEsU0FBUyxVQUFVLEdBQUc7QUFDL0IsY0FBTUMsU0FBUSxNQUFNLGdDQUFnQyxVQUFVO0FBQzlELFFBQUFBLE9BQU0sUUFBUSxhQUFXO0FBQ3JCLGNBQUksT0FBTyxTQUFTO0FBQ2hCLGdCQUFJLENBQUMsUUFBUSxTQUFTLE9BQU8sR0FBRztBQUM1QixtQkFBSyxLQUFLLE9BQU87QUFBQSxZQUNyQixPQUFNO0FBQ0Ysc0JBQVEsS0FBSyxPQUFPO0FBQUEsWUFDeEI7QUFBQSxVQUNKO0FBQUEsUUFDSixDQUFDO0FBRUQsYUFBSyxRQUFRLENBQUMsWUFBWTtBQUN0QixjQUFJLFFBQVEsU0FBUyxPQUFPLEdBQUc7QUFDM0IsaUJBQUssT0FBTyxLQUFLLFFBQVEsT0FBTyxHQUFHLENBQUM7QUFDcEMsb0JBQVEsS0FBSyxPQUFPO0FBQUEsVUFDeEI7QUFBQSxRQUNKLENBQUM7QUFHRCxnQkFBUSxLQUFLLFVBQVU7QUFDdkIsbUJBQVcsV0FBVyxHQUFHLEtBQUssb0JBQW9CLFFBQVEsbUJBQW1CLFFBQVEsbUJBQW1CLFFBQVEsU0FBUyxRQUFRLGdDQUFnQyxNQUFNLGlCQUFpQixXQUFXLFVBQVUsV0FBVztBQUFBLEdBQWlCLFNBQVMsS0FBSztBQUNuUCxjQUFJLEtBQUs7QUFBQSxVQUVQLE9BQU87QUFFTCxvQkFBUSxJQUFJLEdBQUcsS0FBSyxvQkFBb0IsUUFBUSxtQkFBbUIsUUFBUSxtQkFBbUIsUUFBUSxTQUFTLFFBQVEsZ0NBQWdDLE1BQU0saUJBQWlCLFdBQVcsVUFBVSxHQUFHO0FBQUEsVUFDeE07QUFBQSxRQUVOLENBQUM7QUFBQSxNQUdMLE9BQU07QUFDRixnQkFBUSxLQUFLLFVBQVU7QUFBQSxNQUMzQjtBQUFBLElBQ0osU0FBU0QsUUFBUDtBQUNFO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFDSixHQUFHOyIsCiAgIm5hbWVzIjogWyJlcnJvciIsICJocmVmcyJdCn0K

	