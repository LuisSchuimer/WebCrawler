process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719489819792.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// main.ts
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
import { appendFile } from "fs";
var line = [];
var watched = [];
var removed = [];
var error = [];
async function scrapeHrefAttributesFromWebsite(url) {
  try {
    let response = await axios.get(url);
    const $ = cheerio.load(response.data);
    const links = $("a");
    const hrefs = [];
    links.each((_, link) => {
      const href = $(link).attr("href");
      if (href) {
        if (href.includes("https://")) {
          hrefs.push(href);
        } else {
          hrefs.push(getBaseUrl(url) + href);
        }
      }
    });
    return hrefs;
  } catch (err) {
    error.push(url);
    return [];
  }
}
function getBaseUrl(url) {
  try {
    const parsedUrl = new URL(url);
    return `${parsedUrl.protocol}//${parsedUrl.hostname}`;
  } catch (error2) {
    return "";
  }
}
(async () => {
  const url = "https://de.wikipedia.org/wiki/Wikipedia:Hauptseite";
  const hrefs = await scrapeHrefAttributesFromWebsite(url);
  hrefs.forEach((element) => {
    if (url !== element) {
      line.push(element);
    }
  });
  console.log(`${line.length}`);
  while (line.length !== 0) {
    const currentUrl = line.shift();
    if (!currentUrl)
      continue;
    try {
      if (!watched.includes(currentUrl)) {
        const hrefs2 = await scrapeHrefAttributesFromWebsite(currentUrl);
        hrefs2.forEach((element) => {
          if (url != element) {
            if (!watched.includes(element)) {
              line.push(element);
            } else {
              removed.push(element);
            }
          }
        });
        console.log("Cleanup");
        line.forEach((element) => {
          if (watched.includes(element)) {
            line.splice(line.indexOf(element), 1);
            removed.push(element);
          }
        });
        watched.push(currentUrl);
        appendFile("log.txt", `${line.length} in queue; ${watched.length} watched; ${removed.length} removed; ${removed.length + watched.length} processed; ${error.length} with errors; Base: ${getBaseUrl(currentUrl)}: Got: ${currentUrl} 
`, function(err) {
          if (err) {
          } else {
            console.log(`${line.length} in queue; ${watched.length} watched; ${removed.length} removed; ${removed.length + watched.length} processed; ${error.length} with errors; Base: ${getBaseUrl(currentUrl)}`);
          }
        });
      } else {
        removed.push(currentUrl);
      }
    } catch (err) {
      error.push(currentUrl);
      continue;
    }
  }
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VSb290IjogIkM6XFxVc2Vyc1xccDAxXFxHSVRIVUJcXFR5cGVTY3JpcHQyIiwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0ICogYXMgY2hlZXJpbyBmcm9tIFwiY2hlZXJpb1wiO1xyXG5pbXBvcnQgeyBhcHBlbmRGaWxlIH0gZnJvbSBcImZzXCI7XHJcblxyXG5cclxubGV0IGxpbmU6IHN0cmluZ1tdID0gW107XHJcbmxldCB3YXRjaGVkOiBzdHJpbmdbXSA9IFtdO1xyXG5sZXQgcmVtb3ZlZDogc3RyaW5nW10gPSBbXTtcclxubGV0IGVycm9yOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHNjcmFwZUhyZWZBdHRyaWJ1dGVzRnJvbVdlYnNpdGUodXJsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEZldGNoIHRoZSB3ZWJwYWdlIGNvbnRlbnRcclxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsKTtcclxuXHJcbiAgICAgICAgLy8gTG9hZCB0aGUgZmV0Y2hlZCBIVE1MIGNvbnRlbnQgaW50byBDaGVlcmlvXHJcbiAgICAgICAgY29uc3QgJCA9IGNoZWVyaW8ubG9hZChyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBTZWxlY3QgYWxsIDxhPiB0YWdzIGFuZCBleHRyYWN0IGhyZWYgYXR0cmlidXRlc1xyXG4gICAgICAgIGNvbnN0IGxpbmtzID0gJCgnYScpOyAvLyBBZGp1c3QgdGhlIHNlbGVjdG9yIGFzIG5lZWRlZFxyXG4gICAgICAgIGNvbnN0IGhyZWZzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICBsaW5rcy5lYWNoKChfLCBsaW5rKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhyZWYgPSAkKGxpbmspLmF0dHIoJ2hyZWYnKTtcclxuICAgICAgICAgICAgaWYgKGhyZWYpIHtcclxuICAgICAgICAgICAgICAgIGlmIChocmVmLmluY2x1ZGVzKFwiaHR0cHM6Ly9cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBocmVmcy5wdXNoKGhyZWYpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBocmVmcy5wdXNoKGdldEJhc2VVcmwodXJsKSArIGhyZWYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBocmVmcztcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGVycm9yLnB1c2godXJsKTtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBnZXRCYXNlVXJsKHVybDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xyXG4gICAgICAgIHJldHVybiBgJHtwYXJzZWRVcmwucHJvdG9jb2x9Ly8ke3BhcnNlZFVybC5ob3N0bmFtZX1gO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEV4YW1wbGUgdXNhZ2VcclxuKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHVybCA9ICdodHRwczovL2RlLndpa2lwZWRpYS5vcmcvd2lraS9XaWtpcGVkaWE6SGF1cHRzZWl0ZSc7XHJcbiAgICBjb25zdCBocmVmcyA9IGF3YWl0IHNjcmFwZUhyZWZBdHRyaWJ1dGVzRnJvbVdlYnNpdGUodXJsKTtcclxuXHJcbiAgICBocmVmcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgIGlmICh1cmwgIT09IGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgbGluZS5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGAke2xpbmUubGVuZ3RofWApO1xyXG5cclxuICAgIHdoaWxlIChsaW5lLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgIC8vIFdhaXQgZm9yIHRoZSBhc3luYyBmdW5jdGlvbiB0byBjb21wbGV0ZVxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRVcmwgPSBsaW5lLnNoaWZ0KCk7IC8vIEdldCBhbmQgcmVtb3ZlIHRoZSBmaXJzdCBlbGVtZW50IGZyb20gdGhlIGxpbmUgYXJyYXlcclxuICAgICAgICBpZiAoIWN1cnJlbnRVcmwpIGNvbnRpbnVlO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghd2F0Y2hlZC5pbmNsdWRlcyhjdXJyZW50VXJsKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaHJlZnMgPSBhd2FpdCBzY3JhcGVIcmVmQXR0cmlidXRlc0Zyb21XZWJzaXRlKGN1cnJlbnRVcmwpO1xyXG4gICAgICAgICAgICAgICAgaHJlZnMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXJsICE9IGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3YXRjaGVkLmluY2x1ZGVzKGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2xlYW51cFwiKVxyXG5cclxuICAgICAgICAgICAgICAgIGxpbmUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3YXRjaGVkLmluY2x1ZGVzKGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUuc3BsaWNlKGxpbmUuaW5kZXhPZihlbGVtZW50KSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB3YXRjaGVkLnB1c2goY3VycmVudFVybCk7XHJcbiAgICAgICAgICAgICAgICBhcHBlbmRGaWxlKFwibG9nLnR4dFwiLCBgJHtsaW5lLmxlbmd0aH0gaW4gcXVldWU7ICR7d2F0Y2hlZC5sZW5ndGh9IHdhdGNoZWQ7ICR7cmVtb3ZlZC5sZW5ndGh9IHJlbW92ZWQ7ICR7cmVtb3ZlZC5sZW5ndGggKyB3YXRjaGVkLmxlbmd0aH0gcHJvY2Vzc2VkOyAke2Vycm9yLmxlbmd0aH0gd2l0aCBlcnJvcnM7IEJhc2U6ICR7Z2V0QmFzZVVybChjdXJyZW50VXJsKX06IEdvdDogJHtjdXJyZW50VXJsfSBcXG5gLCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFwcGVuZCBmYWlsZWRcclxuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvbmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCR7bGluZS5sZW5ndGh9IGluIHF1ZXVlOyAke3dhdGNoZWQubGVuZ3RofSB3YXRjaGVkOyAke3JlbW92ZWQubGVuZ3RofSByZW1vdmVkOyAke3JlbW92ZWQubGVuZ3RoICsgd2F0Y2hlZC5sZW5ndGh9IHByb2Nlc3NlZDsgJHtlcnJvci5sZW5ndGh9IHdpdGggZXJyb3JzOyBCYXNlOiAke2dldEJhc2VVcmwoY3VycmVudFVybCl9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaChjdXJyZW50VXJsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBlcnJvci5wdXNoKGN1cnJlbnRVcmwpXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTtcclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLE9BQU8sV0FBVztBQUNsQixZQUFZLGFBQWE7QUFDekIsU0FBUyxrQkFBa0I7QUFHM0IsSUFBSSxPQUFpQixDQUFDO0FBQ3RCLElBQUksVUFBb0IsQ0FBQztBQUN6QixJQUFJLFVBQW9CLENBQUM7QUFDekIsSUFBSSxRQUFrQixDQUFDO0FBR3ZCLGVBQWUsZ0NBQWdDLEtBQWdDO0FBQzNFLE1BQUk7QUFHQSxRQUFJLFdBQVcsTUFBTSxNQUFNLElBQUksR0FBRztBQUdsQyxVQUFNLElBQVksYUFBSyxTQUFTLElBQUk7QUFHcEMsVUFBTSxRQUFRLEVBQUUsR0FBRztBQUNuQixVQUFNLFFBQWtCLENBQUM7QUFFekIsVUFBTSxLQUFLLENBQUMsR0FBRyxTQUFTO0FBQ3BCLFlBQU0sT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLE1BQU07QUFDaEMsVUFBSSxNQUFNO0FBQ04sWUFBSSxLQUFLLFNBQVMsVUFBVSxHQUFHO0FBQzNCLGdCQUFNLEtBQUssSUFBSTtBQUFBLFFBQ25CLE9BQU87QUFDSCxnQkFBTSxLQUFLLFdBQVcsR0FBRyxJQUFJLElBQUk7QUFBQSxRQUNyQztBQUFBLE1BQ0o7QUFBQSxJQUNKLENBQUM7QUFFRCxXQUFPO0FBQUEsRUFDWCxTQUFTLEtBQVA7QUFDRSxVQUFNLEtBQUssR0FBRztBQUNkLFdBQU8sQ0FBQztBQUFBLEVBQ1o7QUFDSjtBQUdBLFNBQVMsV0FBVyxLQUFxQjtBQUNyQyxNQUFJO0FBQ0EsVUFBTSxZQUFZLElBQUksSUFBSSxHQUFHO0FBQzdCLFdBQU8sR0FBRyxVQUFVLGFBQWEsVUFBVTtBQUFBLEVBQy9DLFNBQVNBLFFBQVA7QUFDRSxXQUFPO0FBQUEsRUFDWDtBQUNKO0FBQUEsQ0FHQyxZQUFZO0FBQ1QsUUFBTSxNQUFNO0FBQ1osUUFBTSxRQUFRLE1BQU0sZ0NBQWdDLEdBQUc7QUFFdkQsUUFBTSxRQUFRLGFBQVc7QUFDckIsUUFBSSxRQUFRLFNBQVM7QUFDakIsV0FBSyxLQUFLLE9BQU87QUFBQSxJQUNyQjtBQUFBLEVBQ0osQ0FBQztBQUVELFVBQVEsSUFBSSxHQUFHLEtBQUssUUFBUTtBQUU1QixTQUFPLEtBQUssV0FBVyxHQUFHO0FBRXRCLFVBQU0sYUFBYSxLQUFLLE1BQU07QUFDOUIsUUFBSSxDQUFDO0FBQVk7QUFDakIsUUFBSTtBQUNBLFVBQUksQ0FBQyxRQUFRLFNBQVMsVUFBVSxHQUFHO0FBQy9CLGNBQU1DLFNBQVEsTUFBTSxnQ0FBZ0MsVUFBVTtBQUM5RCxRQUFBQSxPQUFNLFFBQVEsYUFBVztBQUNyQixjQUFJLE9BQU8sU0FBUztBQUNoQixnQkFBSSxDQUFDLFFBQVEsU0FBUyxPQUFPLEdBQUc7QUFDNUIsbUJBQUssS0FBSyxPQUFPO0FBQUEsWUFDckIsT0FBTTtBQUNGLHNCQUFRLEtBQUssT0FBTztBQUFBLFlBQ3hCO0FBQUEsVUFDSjtBQUFBLFFBQ0osQ0FBQztBQUVELGdCQUFRLElBQUksU0FBUztBQUVyQixhQUFLLFFBQVEsQ0FBQyxZQUFZO0FBQ3RCLGNBQUksUUFBUSxTQUFTLE9BQU8sR0FBRztBQUMzQixpQkFBSyxPQUFPLEtBQUssUUFBUSxPQUFPLEdBQUcsQ0FBQztBQUNwQyxvQkFBUSxLQUFLLE9BQU87QUFBQSxVQUN4QjtBQUFBLFFBQ0osQ0FBQztBQUdELGdCQUFRLEtBQUssVUFBVTtBQUN2QixtQkFBVyxXQUFXLEdBQUcsS0FBSyxvQkFBb0IsUUFBUSxtQkFBbUIsUUFBUSxtQkFBbUIsUUFBUSxTQUFTLFFBQVEscUJBQXFCLE1BQU0sNkJBQTZCLFdBQVcsVUFBVSxXQUFXO0FBQUEsR0FBaUIsU0FBUyxLQUFLO0FBQ3BQLGNBQUksS0FBSztBQUFBLFVBRVAsT0FBTztBQUVMLG9CQUFRLElBQUksR0FBRyxLQUFLLG9CQUFvQixRQUFRLG1CQUFtQixRQUFRLG1CQUFtQixRQUFRLFNBQVMsUUFBUSxxQkFBcUIsTUFBTSw2QkFBNkIsV0FBVyxVQUFVLEdBQUc7QUFBQSxVQUN6TTtBQUFBLFFBRU4sQ0FBQztBQUFBLE1BR0wsT0FBTTtBQUNGLGdCQUFRLEtBQUssVUFBVTtBQUFBLE1BQzNCO0FBQUEsSUFDSixTQUFTLEtBQVA7QUFDRSxZQUFNLEtBQUssVUFBVTtBQUNyQjtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQ0osR0FBRzsiLAogICJuYW1lcyI6IFsiZXJyb3IiLCAiaHJlZnMiXQp9Cg==

	