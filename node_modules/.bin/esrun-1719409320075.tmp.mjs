process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719409320075.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// main.ts
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
var line = [];
async function scrapeHrefAttributesFromWebsite(url) {
  try {
    const response = await axios.get(url);
    const $ = cheerio.load(response.data);
    const links = $("a");
    const hrefs = [];
    links.each((_, link) => {
      const href = $(link).attr("href");
      if (href) {
        if (href.includes("https://")) {
          hrefs.push(href);
        } else {
          hrefs.push(url + href);
        }
      }
    });
    return hrefs;
  } catch (error) {
    console.error(`Error fetching or processing ${url}: `, error);
    return [];
  }
}
(async () => {
  const url = "https://youtube.com";
  const hrefs = await scrapeHrefAttributesFromWebsite(url);
  hrefs.forEach((element) => {
    if (url !== element) {
      line.push(element);
    }
  });
  console.log(`${line.length}`);
  while (line.length !== 0) {
    const currentUrl = line.shift();
    if (!currentUrl)
      continue;
    try {
      const hrefs2 = await scrapeHrefAttributesFromWebsite(currentUrl);
      hrefs2.forEach((element) => {
        if (url !== element) {
          line.push(element);
        }
      });
      console.log(`Got: ${currentUrl}: ${hrefs2.length} left`);
    } catch (error) {
      console.error(`Error processing ${currentUrl}: `, error);
    }
  }
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VSb290IjogIkM6XFxVc2Vyc1xccDAxXFxHSVRIVUJcXFR5cGVTY3JpcHQyIiwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0ICogYXMgY2hlZXJpbyBmcm9tIFwiY2hlZXJpb1wiO1xyXG5cclxubGV0IGxpbmU6IHN0cmluZ1tdID0gW11cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHNjcmFwZUhyZWZBdHRyaWJ1dGVzRnJvbVdlYnNpdGUodXJsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIEZldGNoIHRoZSB3ZWJwYWdlIGNvbnRlbnRcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIExvYWQgdGhlIGZldGNoZWQgSFRNTCBjb250ZW50IGludG8gQ2hlZXJpb1xyXG4gICAgICAgIGNvbnN0ICQgPSBjaGVlcmlvLmxvYWQocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gU2VsZWN0IGFsbCA8YT4gdGFncyBhbmQgZXh0cmFjdCBocmVmIGF0dHJpYnV0ZXNcclxuICAgICAgICBjb25zdCBsaW5rcyA9ICQoJ2EnKTsgLy8gQWRqdXN0IHRoZSBzZWxlY3RvciBhcyBuZWVkZWRcclxuICAgICAgICBjb25zdCBocmVmczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAgICAgbGlua3MuZWFjaCgoXywgbGluaykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBocmVmID0gJChsaW5rKS5hdHRyKCdocmVmJyk7XHJcbiAgICAgICAgICAgIGlmIChocmVmKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaHJlZi5pbmNsdWRlcyhcImh0dHBzOi8vXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZnMucHVzaChocmVmKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZnMucHVzaCh1cmwgKyBocmVmKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gaHJlZnM7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGZldGNoaW5nIG9yIHByb2Nlc3NpbmcgJHt1cmx9OiBgLCBlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBFeGFtcGxlIHVzYWdlXHJcbihhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB1cmwgPSAnaHR0cHM6Ly95b3V0dWJlLmNvbSc7XHJcbiAgICBjb25zdCBocmVmcyA9IGF3YWl0IHNjcmFwZUhyZWZBdHRyaWJ1dGVzRnJvbVdlYnNpdGUodXJsKTtcclxuXHJcbiAgICBocmVmcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgIGlmICh1cmwgIT09IGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgbGluZS5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGAke2xpbmUubGVuZ3RofWApO1xyXG5cclxuICAgIHdoaWxlIChsaW5lLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgIC8vIFdhaXQgZm9yIHRoZSBhc3luYyBmdW5jdGlvbiB0byBjb21wbGV0ZVxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRVcmwgPSBsaW5lLnNoaWZ0KCk7IC8vIEdldCBhbmQgcmVtb3ZlIHRoZSBmaXJzdCBlbGVtZW50IGZyb20gdGhlIGxpbmUgYXJyYXlcclxuICAgICAgICBpZiAoIWN1cnJlbnRVcmwpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBocmVmcyA9IGF3YWl0IHNjcmFwZUhyZWZBdHRyaWJ1dGVzRnJvbVdlYnNpdGUoY3VycmVudFVybCk7XHJcbiAgICAgICAgICAgIGhyZWZzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXJsICE9PSBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZS5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBHb3Q6ICR7Y3VycmVudFVybH06ICR7aHJlZnMubGVuZ3RofSBsZWZ0YCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgcHJvY2Vzc2luZyAke2N1cnJlbnRVcmx9OiBgLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpO1xyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsT0FBTyxXQUFXO0FBQ2xCLFlBQVksYUFBYTtBQUV6QixJQUFJLE9BQWlCLENBQUM7QUFFdEIsZUFBZSxnQ0FBZ0MsS0FBZ0M7QUFDM0UsTUFBSTtBQUVBLFVBQU0sV0FBVyxNQUFNLE1BQU0sSUFBSSxHQUFHO0FBR3BDLFVBQU0sSUFBWSxhQUFLLFNBQVMsSUFBSTtBQUdwQyxVQUFNLFFBQVEsRUFBRSxHQUFHO0FBQ25CLFVBQU0sUUFBa0IsQ0FBQztBQUV6QixVQUFNLEtBQUssQ0FBQyxHQUFHLFNBQVM7QUFDcEIsWUFBTSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssTUFBTTtBQUNoQyxVQUFJLE1BQU07QUFDTixZQUFJLEtBQUssU0FBUyxVQUFVLEdBQUc7QUFDM0IsZ0JBQU0sS0FBSyxJQUFJO0FBQUEsUUFDbkIsT0FBTztBQUNILGdCQUFNLEtBQUssTUFBTSxJQUFJO0FBQUEsUUFDekI7QUFBQSxNQUNKO0FBQUEsSUFDSixDQUFDO0FBRUQsV0FBTztBQUFBLEVBQ1gsU0FBUyxPQUFQO0FBQ0UsWUFBUSxNQUFNLGdDQUFnQyxTQUFTLEtBQUs7QUFDNUQsV0FBTyxDQUFDO0FBQUEsRUFDWjtBQUNKO0FBQUEsQ0FHQyxZQUFZO0FBQ1QsUUFBTSxNQUFNO0FBQ1osUUFBTSxRQUFRLE1BQU0sZ0NBQWdDLEdBQUc7QUFFdkQsUUFBTSxRQUFRLGFBQVc7QUFDckIsUUFBSSxRQUFRLFNBQVM7QUFDakIsV0FBSyxLQUFLLE9BQU87QUFBQSxJQUNyQjtBQUFBLEVBQ0osQ0FBQztBQUVELFVBQVEsSUFBSSxHQUFHLEtBQUssUUFBUTtBQUU1QixTQUFPLEtBQUssV0FBVyxHQUFHO0FBRXRCLFVBQU0sYUFBYSxLQUFLLE1BQU07QUFDOUIsUUFBSSxDQUFDO0FBQVk7QUFFakIsUUFBSTtBQUNBLFlBQU1BLFNBQVEsTUFBTSxnQ0FBZ0MsVUFBVTtBQUM5RCxNQUFBQSxPQUFNLFFBQVEsYUFBVztBQUNyQixZQUFJLFFBQVEsU0FBUztBQUNqQixlQUFLLEtBQUssT0FBTztBQUFBLFFBQ3JCO0FBQUEsTUFDSixDQUFDO0FBRUQsY0FBUSxJQUFJLFFBQVEsZUFBZUEsT0FBTSxhQUFhO0FBQUEsSUFDMUQsU0FBUyxPQUFQO0FBQ0UsY0FBUSxNQUFNLG9CQUFvQixnQkFBZ0IsS0FBSztBQUFBLElBQzNEO0FBQUEsRUFDSjtBQUNKLEdBQUc7IiwKICAibmFtZXMiOiBbImhyZWZzIl0KfQo=

	