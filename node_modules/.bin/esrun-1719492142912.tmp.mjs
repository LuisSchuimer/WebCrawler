process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719492142912.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// main.ts
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
import { appendFile } from "fs";
var line = [];
var watched = [];
var buffer = [];
var removed = [];
var error = [];
async function scrapeHrefAttributesFromWebsite(url) {
  try {
    let response = await axios.get(url);
    const $ = cheerio.load(response.data);
    const links = $("a");
    const hrefs = [];
    links.each((_, link) => {
      const href = $(link).attr("href");
      if (href) {
        if (href.includes("https://")) {
          hrefs.push(href);
        } else {
          hrefs.push(getBaseUrl(url) + href);
        }
      }
    });
    return hrefs;
  } catch (err) {
    error.push(url);
    return [];
  }
}
function getBaseUrl(url) {
  try {
    const parsedUrl = new URL(url);
    return `${parsedUrl.protocol}//${parsedUrl.hostname}`;
  } catch (error2) {
    return "";
  }
}
(async () => {
  const url = "https://velbert.de";
  const hrefs = await scrapeHrefAttributesFromWebsite(url);
  hrefs.forEach((element) => {
    if (url !== element) {
      line.push(element);
    }
  });
  console.log(`${line.length}`);
  while (line.length !== 0 || buffer.length !== 0) {
    const currentUrl = line.shift();
    if (!currentUrl)
      continue;
    try {
      if (!watched.includes(currentUrl)) {
        const hrefs2 = await scrapeHrefAttributesFromWebsite(currentUrl);
        hrefs2.forEach((element) => {
          if (url != element) {
            if (!watched.includes(element)) {
              line.push(element);
            } else {
              removed.push(element);
            }
          }
        });
        line.forEach((element) => {
          if (watched.includes(element)) {
            line.splice(line.indexOf(element), 1);
            removed.push(element);
          }
        });
        if (line.length >= 1e3) {
          line.forEach((element) => {
            buffer.push(element);
          });
          line = [];
          while (line.length <= 100) {
            const buffer_url = buffer.shift();
            line.push(buffer_url);
          }
        } else if (line.length == 0) {
          while (line.length <= 20) {
            const buffer_url = buffer.shift();
            line.push(buffer_url);
          }
        }
        watched.push(currentUrl);
        appendFile("log.txt", `${line.length} in active queue; ${buffer.length} in buffer; ${watched.length} watched; ${removed.length} removed; ${removed.length + watched.length} processed; ${error.length} with errors; Base: ${getBaseUrl(currentUrl)}: Got: ${currentUrl} 
`, function(err) {
          if (err) {
          } else {
            console.log(`${line.length} in active queue; ${buffer.length} in buffer; ${watched.length} watched; ${removed.length} removed; ${removed.length + watched.length} processed; ${error.length} with errors; Base: ${getBaseUrl(currentUrl)}`);
          }
        });
      } else {
        removed.push(currentUrl);
      }
    } catch (err) {
      error.push(currentUrl);
      continue;
    }
  }
})();
//# sourceMappingURL=data:application/json;base64,

	