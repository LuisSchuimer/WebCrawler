process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719483497877.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// main.ts
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
import { appendFile } from "fs";
var line = [];
var watched = [];
var removed = [];
async function scrapeHrefAttributesFromWebsite(url) {
  try {
    const response = await axios.get(url);
    const $ = cheerio.load(response.data);
    const links = $("a");
    const hrefs = [];
    links.each((_, link) => {
      const href = $(link).attr("href");
      if (href) {
        if (href.includes("https://")) {
          hrefs.push(href);
        } else {
          hrefs.push(getBaseUrl(url) + href);
        }
      }
    });
    return hrefs;
  } catch (error) {
    return [];
  }
}
function getBaseUrl(url) {
  try {
    const parsedUrl = new URL(url);
    return `${parsedUrl.protocol}//${parsedUrl.hostname}`;
  } catch (error) {
    console.error(`Invalid URL: ${url}`);
    return "";
  }
}
(async () => {
  const url = "https://tagesschau.de";
  const hrefs = await scrapeHrefAttributesFromWebsite(url);
  hrefs.forEach((element) => {
    if (url !== element) {
      line.push(element);
    }
  });
  console.log(`${line.length}`);
  while (line.length !== 0) {
    const currentUrl = line.shift();
    if (!currentUrl)
      continue;
    try {
      if (!watched.includes(currentUrl)) {
        const hrefs2 = await scrapeHrefAttributesFromWebsite(currentUrl);
        hrefs2.forEach((element) => {
          if (url != element) {
            if (!watched.includes(element)) {
              line.push(element);
            } else {
              removed.push(element);
            }
          }
        });
        line.forEach((element) => {
          if (watched.includes(element)) {
            line.splice(line.indexOf(element), 1);
            removed.push(element);
          }
        });
        watched.push(currentUrl);
        appendFile("log.txt", `${line.length} left; ${watched.length} watched; ${removed.length} removed; Base: ${getBaseUrl(currentUrl)}: Got: ${currentUrl} 
`, function(err) {
          if (err) {
          } else {
            console.log(`${line.length} left; ${watched.length} watched; ${removed.length} removed; Base: ${getBaseUrl(currentUrl)}: Got: ${currentUrl}`);
          }
        });
      } else {
        removed.push(currentUrl);
      }
    } catch (error) {
      continue;
    }
  }
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VSb290IjogIkM6XFxVc2Vyc1xccDAxXFxHSVRIVUJcXFR5cGVTY3JpcHQyIiwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0ICogYXMgY2hlZXJpbyBmcm9tIFwiY2hlZXJpb1wiO1xyXG5pbXBvcnQgeyBhcHBlbmRGaWxlIH0gZnJvbSBcImZzXCI7XHJcblxyXG5cclxubGV0IGxpbmU6IHN0cmluZ1tdID0gW107XHJcbmxldCB3YXRjaGVkOiBzdHJpbmdbXSA9IFtdO1xyXG5sZXQgcmVtb3ZlZDogc3RyaW5nW10gPSBbXTtcclxuXHJcblxyXG5hc3luYyBmdW5jdGlvbiBzY3JhcGVIcmVmQXR0cmlidXRlc0Zyb21XZWJzaXRlKHVybDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBGZXRjaCB0aGUgd2VicGFnZSBjb250ZW50XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBMb2FkIHRoZSBmZXRjaGVkIEhUTUwgY29udGVudCBpbnRvIENoZWVyaW9cclxuICAgICAgICBjb25zdCAkID0gY2hlZXJpby5sb2FkKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFNlbGVjdCBhbGwgPGE+IHRhZ3MgYW5kIGV4dHJhY3QgaHJlZiBhdHRyaWJ1dGVzXHJcbiAgICAgICAgY29uc3QgbGlua3MgPSAkKCdhJyk7IC8vIEFkanVzdCB0aGUgc2VsZWN0b3IgYXMgbmVlZGVkXHJcbiAgICAgICAgY29uc3QgaHJlZnM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgICAgIGxpbmtzLmVhY2goKF8sIGxpbmspID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaHJlZiA9ICQobGluaykuYXR0cignaHJlZicpO1xyXG4gICAgICAgICAgICBpZiAoaHJlZikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGhyZWYuaW5jbHVkZXMoXCJodHRwczovL1wiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhyZWZzLnB1c2goaHJlZik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGhyZWZzLnB1c2goZ2V0QmFzZVVybCh1cmwpICsgaHJlZik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGhyZWZzO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBnZXRCYXNlVXJsKHVybDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xyXG4gICAgICAgIHJldHVybiBgJHtwYXJzZWRVcmwucHJvdG9jb2x9Ly8ke3BhcnNlZFVybC5ob3N0bmFtZX1gO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBJbnZhbGlkIFVSTDogJHt1cmx9YCk7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBFeGFtcGxlIHVzYWdlXHJcbihhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB1cmwgPSAnaHR0cHM6Ly90YWdlc3NjaGF1LmRlJztcclxuICAgIGNvbnN0IGhyZWZzID0gYXdhaXQgc2NyYXBlSHJlZkF0dHJpYnV0ZXNGcm9tV2Vic2l0ZSh1cmwpO1xyXG5cclxuICAgIGhyZWZzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgaWYgKHVybCAhPT0gZWxlbWVudCkge1xyXG4gICAgICAgICAgICBsaW5lLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc29sZS5sb2coYCR7bGluZS5sZW5ndGh9YCk7XHJcblxyXG4gICAgd2hpbGUgKGxpbmUubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgLy8gV2FpdCBmb3IgdGhlIGFzeW5jIGZ1bmN0aW9uIHRvIGNvbXBsZXRlXHJcbiAgICAgICAgY29uc3QgY3VycmVudFVybCA9IGxpbmUuc2hpZnQoKTsgLy8gR2V0IGFuZCByZW1vdmUgdGhlIGZpcnN0IGVsZW1lbnQgZnJvbSB0aGUgbGluZSBhcnJheVxyXG4gICAgICAgIGlmICghY3VycmVudFVybCkgY29udGludWU7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICghd2F0Y2hlZC5pbmNsdWRlcyhjdXJyZW50VXJsKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaHJlZnMgPSBhd2FpdCBzY3JhcGVIcmVmQXR0cmlidXRlc0Zyb21XZWJzaXRlKGN1cnJlbnRVcmwpO1xyXG4gICAgICAgICAgICAgICAgaHJlZnMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXJsICE9IGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3YXRjaGVkLmluY2x1ZGVzKGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGxpbmUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3YXRjaGVkLmluY2x1ZGVzKGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUuc3BsaWNlKGxpbmUuaW5kZXhPZihlbGVtZW50KSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB3YXRjaGVkLnB1c2goY3VycmVudFVybCk7XHJcbiAgICAgICAgICAgICAgICBhcHBlbmRGaWxlKFwibG9nLnR4dFwiLCBgJHtsaW5lLmxlbmd0aH0gbGVmdDsgJHt3YXRjaGVkLmxlbmd0aH0gd2F0Y2hlZDsgJHtyZW1vdmVkLmxlbmd0aH0gcmVtb3ZlZDsgQmFzZTogJHtnZXRCYXNlVXJsKGN1cnJlbnRVcmwpfTogR290OiAke2N1cnJlbnRVcmx9IFxcbmAsIGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXBwZW5kIGZhaWxlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9uZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtsaW5lLmxlbmd0aH0gbGVmdDsgJHt3YXRjaGVkLmxlbmd0aH0gd2F0Y2hlZDsgJHtyZW1vdmVkLmxlbmd0aH0gcmVtb3ZlZDsgQmFzZTogJHtnZXRCYXNlVXJsKGN1cnJlbnRVcmwpfTogR290OiAke2N1cnJlbnRVcmx9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaChjdXJyZW50VXJsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTtcclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLE9BQU8sV0FBVztBQUNsQixZQUFZLGFBQWE7QUFDekIsU0FBUyxrQkFBa0I7QUFHM0IsSUFBSSxPQUFpQixDQUFDO0FBQ3RCLElBQUksVUFBb0IsQ0FBQztBQUN6QixJQUFJLFVBQW9CLENBQUM7QUFHekIsZUFBZSxnQ0FBZ0MsS0FBZ0M7QUFDM0UsTUFBSTtBQUVBLFVBQU0sV0FBVyxNQUFNLE1BQU0sSUFBSSxHQUFHO0FBR3BDLFVBQU0sSUFBWSxhQUFLLFNBQVMsSUFBSTtBQUdwQyxVQUFNLFFBQVEsRUFBRSxHQUFHO0FBQ25CLFVBQU0sUUFBa0IsQ0FBQztBQUV6QixVQUFNLEtBQUssQ0FBQyxHQUFHLFNBQVM7QUFDcEIsWUFBTSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssTUFBTTtBQUNoQyxVQUFJLE1BQU07QUFDTixZQUFJLEtBQUssU0FBUyxVQUFVLEdBQUc7QUFDM0IsZ0JBQU0sS0FBSyxJQUFJO0FBQUEsUUFDbkIsT0FBTztBQUNILGdCQUFNLEtBQUssV0FBVyxHQUFHLElBQUksSUFBSTtBQUFBLFFBQ3JDO0FBQUEsTUFDSjtBQUFBLElBQ0osQ0FBQztBQUVELFdBQU87QUFBQSxFQUNYLFNBQVMsT0FBUDtBQUNFLFdBQU8sQ0FBQztBQUFBLEVBQ1o7QUFDSjtBQUdBLFNBQVMsV0FBVyxLQUFxQjtBQUNyQyxNQUFJO0FBQ0EsVUFBTSxZQUFZLElBQUksSUFBSSxHQUFHO0FBQzdCLFdBQU8sR0FBRyxVQUFVLGFBQWEsVUFBVTtBQUFBLEVBQy9DLFNBQVMsT0FBUDtBQUNFLFlBQVEsTUFBTSxnQkFBZ0IsS0FBSztBQUNuQyxXQUFPO0FBQUEsRUFDWDtBQUNKO0FBQUEsQ0FHQyxZQUFZO0FBQ1QsUUFBTSxNQUFNO0FBQ1osUUFBTSxRQUFRLE1BQU0sZ0NBQWdDLEdBQUc7QUFFdkQsUUFBTSxRQUFRLGFBQVc7QUFDckIsUUFBSSxRQUFRLFNBQVM7QUFDakIsV0FBSyxLQUFLLE9BQU87QUFBQSxJQUNyQjtBQUFBLEVBQ0osQ0FBQztBQUVELFVBQVEsSUFBSSxHQUFHLEtBQUssUUFBUTtBQUU1QixTQUFPLEtBQUssV0FBVyxHQUFHO0FBRXRCLFVBQU0sYUFBYSxLQUFLLE1BQU07QUFDOUIsUUFBSSxDQUFDO0FBQVk7QUFFakIsUUFBSTtBQUNBLFVBQUksQ0FBQyxRQUFRLFNBQVMsVUFBVSxHQUFHO0FBQy9CLGNBQU1BLFNBQVEsTUFBTSxnQ0FBZ0MsVUFBVTtBQUM5RCxRQUFBQSxPQUFNLFFBQVEsYUFBVztBQUNyQixjQUFJLE9BQU8sU0FBUztBQUNoQixnQkFBSSxDQUFDLFFBQVEsU0FBUyxPQUFPLEdBQUc7QUFDNUIsbUJBQUssS0FBSyxPQUFPO0FBQUEsWUFDckIsT0FBTTtBQUNGLHNCQUFRLEtBQUssT0FBTztBQUFBLFlBQ3hCO0FBQUEsVUFDSjtBQUFBLFFBQ0osQ0FBQztBQUVELGFBQUssUUFBUSxDQUFDLFlBQVk7QUFDdEIsY0FBSSxRQUFRLFNBQVMsT0FBTyxHQUFHO0FBQzNCLGlCQUFLLE9BQU8sS0FBSyxRQUFRLE9BQU8sR0FBRyxDQUFDO0FBQ3BDLG9CQUFRLEtBQUssT0FBTztBQUFBLFVBQ3hCO0FBQUEsUUFDSixDQUFDO0FBR0QsZ0JBQVEsS0FBSyxVQUFVO0FBQ3ZCLG1CQUFXLFdBQVcsR0FBRyxLQUFLLGdCQUFnQixRQUFRLG1CQUFtQixRQUFRLHlCQUF5QixXQUFXLFVBQVUsV0FBVztBQUFBLEdBQWlCLFNBQVMsS0FBSztBQUNySyxjQUFJLEtBQUs7QUFBQSxVQUVQLE9BQU87QUFFTCxvQkFBUSxJQUFJLEdBQUcsS0FBSyxnQkFBZ0IsUUFBUSxtQkFBbUIsUUFBUSx5QkFBeUIsV0FBVyxVQUFVLFdBQVcsWUFBWTtBQUFBLFVBQzlJO0FBQUEsUUFFTixDQUFDO0FBQUEsTUFHTCxPQUFNO0FBQ0YsZ0JBQVEsS0FBSyxVQUFVO0FBQUEsTUFDM0I7QUFBQSxJQUNKLFNBQVMsT0FBUDtBQUNFO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFDSixHQUFHOyIsCiAgIm5hbWVzIjogWyJocmVmcyJdCn0K

	