process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\Users\p01\GITHUB\TypeScript2\node_modules\.bin\esrun-1719570424750.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// getimg.ts
import * as fs from "fs";
import * as readline from "readline";
import axios from "../../node_modules/axios/index.js";
import * as cheerio from "../../node_modules/cheerio/lib/esm/index.js";
import * as path from "path";
import * as urlModule from "url";
async function readLinesFromFile(filePath) {
  const fileStream = fs.createReadStream(filePath);
  const rl = readline.createInterface({
    input: fileStream,
    crlfDelay: Infinity
  });
  const lines = [];
  for await (const line of rl) {
    lines.push(line);
  }
  return lines;
}
function extractUrls(lines) {
  const urls = [];
  const urlPattern = /Got: (https?:\/\/[^\s]+)/;
  for (const line of lines) {
    const match = line.match(urlPattern);
    if (match && match[1]) {
      urls.push(match[1]);
    }
  }
  return urls;
}
async function fetchHtml(url) {
  const response = await axios.get(url);
  return response.data;
}
function extractImageUrls(html, baseUrl) {
  const $ = cheerio.load(html);
  const imageUrls = [];
  $("img").each((_, img) => {
    let src = $(img).attr("src");
    if (src) {
      src = new urlModule.URL(src, baseUrl).href;
      imageUrls.push(src);
    }
  });
  return imageUrls;
}
async function downloadImage(url, folder) {
  try {
    const response = await axios.get(url, { responseType: "arraybuffer" });
    const filename = path.basename(urlModule.parse(url).pathname || "");
    const filePath = path.join(folder, filename);
    fs.writeFileSync(filePath, response.data);
    console.log(`Downloaded: ${filename}`);
  } catch (error) {
    console.error(`Failed to download image ${url}:`, error.message);
  }
}
async function main() {
  const filePath = "log.txt";
  const downloadFolder = "images";
  if (!fs.existsSync(downloadFolder)) {
    fs.mkdirSync(downloadFolder);
  }
  const lines = await readLinesFromFile(filePath);
  const urls = extractUrls(lines);
  console.log(`Found ${urls.length} URLs to process.`);
  for (let i = 0; i < urls.length; i++) {
    const url = urls[i];
    console.log(`Processing ${i + 1}/${urls.length}: ${url}`);
    try {
      const html = await fetchHtml(url);
      const imageUrls = extractImageUrls(html, url);
      console.log(`Found ${imageUrls.length} images.`);
      for (const imageUrl of imageUrls) {
        await downloadImage(imageUrl, downloadFolder);
      }
    } catch (error) {
      console.error(`Failed to fetch or process ${url}:`, error.message);
    }
  }
}
main().catch((error) => console.error("Error in main function:", error));
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiZ2V0aW1nLnRzIl0sCiAgInNvdXJjZVJvb3QiOiAiQzpcXFVzZXJzXFxwMDFcXEdJVEhVQlxcVHlwZVNjcmlwdDIiLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xyXG5pbXBvcnQgKiBhcyByZWFkbGluZSBmcm9tICdyZWFkbGluZSc7XHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCAqIGFzIGNoZWVyaW8gZnJvbSAnY2hlZXJpbyc7XHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCAqIGFzIHVybE1vZHVsZSBmcm9tICd1cmwnO1xyXG5cclxuLy8gUmVhZCB0aGUgdGV4dCBmaWxlIGxpbmUgYnkgbGluZVxyXG5hc3luYyBmdW5jdGlvbiByZWFkTGluZXNGcm9tRmlsZShmaWxlUGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xyXG4gICAgY29uc3QgZmlsZVN0cmVhbSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0oZmlsZVBhdGgpO1xyXG4gICAgY29uc3QgcmwgPSByZWFkbGluZS5jcmVhdGVJbnRlcmZhY2Uoe1xyXG4gICAgICAgIGlucHV0OiBmaWxlU3RyZWFtLFxyXG4gICAgICAgIGNybGZEZWxheTogSW5maW5pdHksXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBsaW5lczogc3RyaW5nW10gPSBbXTtcclxuICAgIGZvciBhd2FpdCAoY29uc3QgbGluZSBvZiBybCkge1xyXG4gICAgICAgIGxpbmVzLnB1c2gobGluZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGluZXM7XHJcbn1cclxuXHJcbi8vIEV4dHJhY3QgVVJMcyBmcm9tIGVhY2ggbGluZVxyXG5mdW5jdGlvbiBleHRyYWN0VXJscyhsaW5lczogc3RyaW5nW10pOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCB1cmxzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgY29uc3QgdXJsUGF0dGVybiA9IC9Hb3Q6IChodHRwcz86XFwvXFwvW15cXHNdKykvO1xyXG4gICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBsaW5lLm1hdGNoKHVybFBhdHRlcm4pO1xyXG4gICAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsxXSkge1xyXG4gICAgICAgICAgICB1cmxzLnB1c2gobWF0Y2hbMV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB1cmxzO1xyXG59XHJcblxyXG4vLyBGZXRjaCBIVE1MIGNvbnRlbnQgZnJvbSBhIFVSTFxyXG5hc3luYyBmdW5jdGlvbiBmZXRjaEh0bWwodXJsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsKTtcclxuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xyXG59XHJcblxyXG4vLyBFeHRyYWN0IGltYWdlIFVSTHMgZnJvbSBIVE1MIGNvbnRlbnRcclxuZnVuY3Rpb24gZXh0cmFjdEltYWdlVXJscyhodG1sOiBzdHJpbmcsIGJhc2VVcmw6IHN0cmluZyk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0ICQgPSBjaGVlcmlvLmxvYWQoaHRtbCk7XHJcbiAgICBjb25zdCBpbWFnZVVybHM6IHN0cmluZ1tdID0gW107XHJcbiAgICAkKCdpbWcnKS5lYWNoKChfLCBpbWcpID0+IHtcclxuICAgICAgICBsZXQgc3JjID0gJChpbWcpLmF0dHIoJ3NyYycpO1xyXG4gICAgICAgIGlmIChzcmMpIHtcclxuICAgICAgICAgICAgc3JjID0gbmV3IHVybE1vZHVsZS5VUkwoc3JjLCBiYXNlVXJsKS5ocmVmOyAvLyBSZXNvbHZlIHJlbGF0aXZlIFVSTHNcclxuICAgICAgICAgICAgaW1hZ2VVcmxzLnB1c2goc3JjKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBpbWFnZVVybHM7XHJcbn1cclxuXHJcbi8vIERvd25sb2FkIGFuIGltYWdlIGFuZCBzYXZlIGl0IHRvIHRoZSBzcGVjaWZpZWQgZm9sZGVyXHJcbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkSW1hZ2UodXJsOiBzdHJpbmcsIGZvbGRlcjogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCwgeyByZXNwb25zZVR5cGU6ICdhcnJheWJ1ZmZlcicgfSk7XHJcbiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBwYXRoLmJhc2VuYW1lKHVybE1vZHVsZS5wYXJzZSh1cmwpLnBhdGhuYW1lIHx8ICcnKTtcclxuICAgICAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihmb2xkZXIsIGZpbGVuYW1lKTtcclxuICAgICAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGVQYXRoLCByZXNwb25zZS5kYXRhKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhgRG93bmxvYWRlZDogJHtmaWxlbmFtZX1gKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGRvd25sb2FkIGltYWdlICR7dXJsfTpgLCBlcnJvci5tZXNzYWdlKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gTWFpbiBmdW5jdGlvblxyXG5hc3luYyBmdW5jdGlvbiBtYWluKCkge1xyXG4gICAgY29uc3QgZmlsZVBhdGggPSAnbG9nLnR4dCc7IC8vIFBhdGggdG8geW91ciB0ZXh0IGZpbGVcclxuICAgIGNvbnN0IGRvd25sb2FkRm9sZGVyID0gJ2ltYWdlcyc7IC8vIEZvbGRlciB0byBzYXZlIGltYWdlc1xyXG5cclxuICAgIC8vIENyZWF0ZSBkb3dubG9hZCBmb2xkZXIgaWYgaXQgZG9lc24ndCBleGlzdFxyXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKGRvd25sb2FkRm9sZGVyKSkge1xyXG4gICAgICAgIGZzLm1rZGlyU3luYyhkb3dubG9hZEZvbGRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbGluZXMgPSBhd2FpdCByZWFkTGluZXNGcm9tRmlsZShmaWxlUGF0aCk7XHJcbiAgICBjb25zdCB1cmxzID0gZXh0cmFjdFVybHMobGluZXMpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGBGb3VuZCAke3VybHMubGVuZ3RofSBVUkxzIHRvIHByb2Nlc3MuYCk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1cmxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gdXJsc1tpXTtcclxuICAgICAgICBjb25zb2xlLmxvZyhgUHJvY2Vzc2luZyAke2kgKyAxfS8ke3VybHMubGVuZ3RofTogJHt1cmx9YCk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IGZldGNoSHRtbCh1cmwpO1xyXG4gICAgICAgICAgICBjb25zdCBpbWFnZVVybHMgPSBleHRyYWN0SW1hZ2VVcmxzKGh0bWwsIHVybCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBGb3VuZCAke2ltYWdlVXJscy5sZW5ndGh9IGltYWdlcy5gKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaW1hZ2VVcmwgb2YgaW1hZ2VVcmxzKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBkb3dubG9hZEltYWdlKGltYWdlVXJsLCBkb3dubG9hZEZvbGRlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggb3IgcHJvY2VzcyAke3VybH06YCwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5tYWluKCkuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcignRXJyb3IgaW4gbWFpbiBmdW5jdGlvbjonLCBlcnJvcikpO1xyXG4iXSwKICAibWFw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

	